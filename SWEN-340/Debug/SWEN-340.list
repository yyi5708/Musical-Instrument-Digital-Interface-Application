
SWEN-340.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001e10  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000360  08001fa0  08001fa0  00002fa0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002300  08002300  0000405c  2**0
                  CONTENTS
  4 .ARM          00000008  08002300  08002300  00003300  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002308  08002308  0000405c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002308  08002308  00003308  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800230c  0800230c  0000330c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08002310  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000038c  2000005c  0800236c  0000405c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200003e8  0800236c  000043e8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000405c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000049e1  00000000  00000000  0000408c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000012ab  00000000  00000000  00008a6d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000004e0  00000000  00000000  00009d18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000375  00000000  00000000  0000a1f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026507  00000000  00000000  0000a56d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00006270  00000000  00000000  00030a74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f50cd  00000000  00000000  00036ce4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0012bdb1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000015e4  00000000  00000000  0012bdf4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005f  00000000  00000000  0012d3d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000005c 	.word	0x2000005c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08001f88 	.word	0x08001f88

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000060 	.word	0x20000060
 80001cc:	08001f88 	.word	0x08001f88

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <main>:
#include "project_part_1.h"
#include "project_part_2.h"
#include "project_part_3.h"

int main(void) {
 80002a0:	b580      	push	{r7, lr}
 80002a2:	af00      	add	r7, sp, #0
//	return run_main(); // Run Main Project Part 1
//	return run_main(); // Run Main Project Part 2
	return run_main(); // Run Main Project Part 3
 80002a4:	f000 fdb6 	bl	8000e14 <run_main>
 80002a8:	4603      	mov	r3, r0
    return 0;
}
 80002aa:	4618      	mov	r0, r3
 80002ac:	bd80      	pop	{r7, pc}
	...

080002b0 <GPIO_Init>:
extern int is_remote_mode;
// Flag indicating if the system is in local control mode (1 = local mode active) shared across modules
extern int is_local_mode;

// Initialize GPIO pins for button interrupts
void GPIO_Init(void) {
 80002b0:	b580      	push	{r7, lr}
 80002b2:	b088      	sub	sp, #32
 80002b4:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002b6:	f107 030c 	add.w	r3, r7, #12
 80002ba:	2200      	movs	r2, #0
 80002bc:	601a      	str	r2, [r3, #0]
 80002be:	605a      	str	r2, [r3, #4]
 80002c0:	609a      	str	r2, [r3, #8]
 80002c2:	60da      	str	r2, [r3, #12]
 80002c4:	611a      	str	r2, [r3, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80002c6:	4b24      	ldr	r3, [pc, #144]	@ (8000358 <GPIO_Init+0xa8>)
 80002c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80002ca:	4a23      	ldr	r2, [pc, #140]	@ (8000358 <GPIO_Init+0xa8>)
 80002cc:	f043 0304 	orr.w	r3, r3, #4
 80002d0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80002d2:	4b21      	ldr	r3, [pc, #132]	@ (8000358 <GPIO_Init+0xa8>)
 80002d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80002d6:	f003 0304 	and.w	r3, r3, #4
 80002da:	60bb      	str	r3, [r7, #8]
 80002dc:	68bb      	ldr	r3, [r7, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80002de:	4b1e      	ldr	r3, [pc, #120]	@ (8000358 <GPIO_Init+0xa8>)
 80002e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80002e2:	4a1d      	ldr	r2, [pc, #116]	@ (8000358 <GPIO_Init+0xa8>)
 80002e4:	f043 0301 	orr.w	r3, r3, #1
 80002e8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80002ea:	4b1b      	ldr	r3, [pc, #108]	@ (8000358 <GPIO_Init+0xa8>)
 80002ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80002ee:	f003 0301 	and.w	r3, r3, #1
 80002f2:	607b      	str	r3, [r7, #4]
 80002f4:	687b      	ldr	r3, [r7, #4]
    GPIO_InitStruct.Pin = B1_Pin;
 80002f6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80002fa:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80002fc:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000300:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000302:	2300      	movs	r3, #0
 8000304:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000306:	f107 030c 	add.w	r3, r7, #12
 800030a:	4619      	mov	r1, r3
 800030c:	4813      	ldr	r0, [pc, #76]	@ (800035c <GPIO_Init+0xac>)
 800030e:	f000 ffbf 	bl	8001290 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = S1_Pin;
 8000312:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000316:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000318:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 800031c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800031e:	2302      	movs	r3, #2
 8000320:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(S1_GPIO_Port, &GPIO_InitStruct);
 8000322:	f107 030c 	add.w	r3, r7, #12
 8000326:	4619      	mov	r1, r3
 8000328:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800032c:	f000 ffb0 	bl	8001290 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(EXTI9_5_IRQn, 2, 0);
 8000330:	2200      	movs	r2, #0
 8000332:	2102      	movs	r1, #2
 8000334:	2017      	movs	r0, #23
 8000336:	f000 ff80 	bl	800123a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800033a:	2017      	movs	r0, #23
 800033c:	f000 ff99 	bl	8001272 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(EXTI15_10_IRQn, 2, 0);
 8000340:	2200      	movs	r2, #0
 8000342:	2102      	movs	r1, #2
 8000344:	2028      	movs	r0, #40	@ 0x28
 8000346:	f000 ff78 	bl	800123a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800034a:	2028      	movs	r0, #40	@ 0x28
 800034c:	f000 ff91 	bl	8001272 <HAL_NVIC_EnableIRQ>
}
 8000350:	bf00      	nop
 8000352:	3720      	adds	r7, #32
 8000354:	46bd      	mov	sp, r7
 8000356:	bd80      	pop	{r7, pc}
 8000358:	40021000 	.word	0x40021000
 800035c:	48000800 	.word	0x48000800

08000360 <EXTI15_10_IRQHandler>:

// Interrupt handler for EXTI lines 10 to 15 (handles B1 button press)
void EXTI15_10_IRQHandler(void) {
 8000360:	b580      	push	{r7, lr}
 8000362:	af00      	add	r7, sp, #0
    if (__HAL_GPIO_EXTI_GET_IT(B1_Pin) != RESET) {
 8000364:	4b0a      	ldr	r3, [pc, #40]	@ (8000390 <EXTI15_10_IRQHandler+0x30>)
 8000366:	695b      	ldr	r3, [r3, #20]
 8000368:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800036c:	2b00      	cmp	r3, #0
 800036e:	d00c      	beq.n	800038a <EXTI15_10_IRQHandler+0x2a>
        if (is_remote_mode) {
 8000370:	4b08      	ldr	r3, [pc, #32]	@ (8000394 <EXTI15_10_IRQHandler+0x34>)
 8000372:	681b      	ldr	r3, [r3, #0]
 8000374:	2b00      	cmp	r3, #0
 8000376:	d002      	beq.n	800037e <EXTI15_10_IRQHandler+0x1e>
            switch_to_local_mode();
 8000378:	f000 fb7a 	bl	8000a70 <switch_to_local_mode>
 800037c:	e001      	b.n	8000382 <EXTI15_10_IRQHandler+0x22>
        } else {
            switch_to_remote_mode();
 800037e:	f000 fb5d 	bl	8000a3c <switch_to_remote_mode>
        }
        __HAL_GPIO_EXTI_CLEAR_IT(B1_Pin);
 8000382:	4b03      	ldr	r3, [pc, #12]	@ (8000390 <EXTI15_10_IRQHandler+0x30>)
 8000384:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000388:	615a      	str	r2, [r3, #20]
    }
}
 800038a:	bf00      	nop
 800038c:	bd80      	pop	{r7, pc}
 800038e:	bf00      	nop
 8000390:	40010400 	.word	0x40010400
 8000394:	20000004 	.word	0x20000004

08000398 <EXTI9_5_IRQHandler>:
//        __HAL_GPIO_EXTI_CLEAR_IT(S1_Pin);
//    }
//}

// Interrupt handler for EXTI lines 9 to 5 (handles S1 button press)
void EXTI9_5_IRQHandler(void) {
 8000398:	b580      	push	{r7, lr}
 800039a:	b082      	sub	sp, #8
 800039c:	af00      	add	r7, sp, #0
    static uint32_t last_press_time = 0;
    static uint8_t press_count = 0;
    uint32_t current_time = HAL_GetTick();
 800039e:	f000 feb7 	bl	8001110 <HAL_GetTick>
 80003a2:	6078      	str	r0, [r7, #4]
    if (__HAL_GPIO_EXTI_GET_IT(S1_Pin) != RESET && is_local_mode) {
 80003a4:	4b2a      	ldr	r3, [pc, #168]	@ (8000450 <EXTI9_5_IRQHandler+0xb8>)
 80003a6:	695b      	ldr	r3, [r3, #20]
 80003a8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80003ac:	2b00      	cmp	r3, #0
 80003ae:	d04a      	beq.n	8000446 <EXTI9_5_IRQHandler+0xae>
 80003b0:	4b28      	ldr	r3, [pc, #160]	@ (8000454 <EXTI9_5_IRQHandler+0xbc>)
 80003b2:	681b      	ldr	r3, [r3, #0]
 80003b4:	2b00      	cmp	r3, #0
 80003b6:	d046      	beq.n	8000446 <EXTI9_5_IRQHandler+0xae>
        if (HAL_GPIO_ReadPin(S1_GPIO_Port, S1_Pin) == GPIO_PIN_SET) {
 80003b8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80003bc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80003c0:	f001 f910 	bl	80015e4 <HAL_GPIO_ReadPin>
 80003c4:	4603      	mov	r3, r0
 80003c6:	2b01      	cmp	r3, #1
 80003c8:	d128      	bne.n	800041c <EXTI9_5_IRQHandler+0x84>
            if (current_time - last_press_time <= 1000) {
 80003ca:	4b23      	ldr	r3, [pc, #140]	@ (8000458 <EXTI9_5_IRQHandler+0xc0>)
 80003cc:	681b      	ldr	r3, [r3, #0]
 80003ce:	687a      	ldr	r2, [r7, #4]
 80003d0:	1ad3      	subs	r3, r2, r3
 80003d2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80003d6:	d811      	bhi.n	80003fc <EXTI9_5_IRQHandler+0x64>
                press_count++;
 80003d8:	4b20      	ldr	r3, [pc, #128]	@ (800045c <EXTI9_5_IRQHandler+0xc4>)
 80003da:	781b      	ldrb	r3, [r3, #0]
 80003dc:	3301      	adds	r3, #1
 80003de:	b2da      	uxtb	r2, r3
 80003e0:	4b1e      	ldr	r3, [pc, #120]	@ (800045c <EXTI9_5_IRQHandler+0xc4>)
 80003e2:	701a      	strb	r2, [r3, #0]
                if (press_count == 4) {
 80003e4:	4b1d      	ldr	r3, [pc, #116]	@ (800045c <EXTI9_5_IRQHandler+0xc4>)
 80003e6:	781b      	ldrb	r3, [r3, #0]
 80003e8:	2b04      	cmp	r3, #4
 80003ea:	d10a      	bne.n	8000402 <EXTI9_5_IRQHandler+0x6a>
                    next_song();
 80003ec:	f000 fc00 	bl	8000bf0 <next_song>
                    toggle_flash();
 80003f0:	f000 fc22 	bl	8000c38 <toggle_flash>
                    custom_printf("\r\n\n>> ");
 80003f4:	481a      	ldr	r0, [pc, #104]	@ (8000460 <EXTI9_5_IRQHandler+0xc8>)
 80003f6:	f000 fa01 	bl	80007fc <custom_printf>
 80003fa:	e002      	b.n	8000402 <EXTI9_5_IRQHandler+0x6a>
                }
            } else {
                press_count = 1;
 80003fc:	4b17      	ldr	r3, [pc, #92]	@ (800045c <EXTI9_5_IRQHandler+0xc4>)
 80003fe:	2201      	movs	r2, #1
 8000400:	701a      	strb	r2, [r3, #0]
            }
            if (press_count == 5) {
 8000402:	4b16      	ldr	r3, [pc, #88]	@ (800045c <EXTI9_5_IRQHandler+0xc4>)
 8000404:	781b      	ldrb	r3, [r3, #0]
 8000406:	2b05      	cmp	r3, #5
 8000408:	d104      	bne.n	8000414 <EXTI9_5_IRQHandler+0x7c>
                stop_song();
 800040a:	f000 fbe1 	bl	8000bd0 <stop_song>
                press_count = 0;
 800040e:	4b13      	ldr	r3, [pc, #76]	@ (800045c <EXTI9_5_IRQHandler+0xc4>)
 8000410:	2200      	movs	r2, #0
 8000412:	701a      	strb	r2, [r3, #0]
            }
            last_press_time = current_time;
 8000414:	4a10      	ldr	r2, [pc, #64]	@ (8000458 <EXTI9_5_IRQHandler+0xc0>)
 8000416:	687b      	ldr	r3, [r7, #4]
 8000418:	6013      	str	r3, [r2, #0]
 800041a:	e010      	b.n	800043e <EXTI9_5_IRQHandler+0xa6>
        } else {
            if (press_count == 1 || press_count == 2) {
 800041c:	4b0f      	ldr	r3, [pc, #60]	@ (800045c <EXTI9_5_IRQHandler+0xc4>)
 800041e:	781b      	ldrb	r3, [r3, #0]
 8000420:	2b01      	cmp	r3, #1
 8000422:	d003      	beq.n	800042c <EXTI9_5_IRQHandler+0x94>
 8000424:	4b0d      	ldr	r3, [pc, #52]	@ (800045c <EXTI9_5_IRQHandler+0xc4>)
 8000426:	781b      	ldrb	r3, [r3, #0]
 8000428:	2b02      	cmp	r3, #2
 800042a:	d108      	bne.n	800043e <EXTI9_5_IRQHandler+0xa6>
                if (led_state == 1) {
 800042c:	4b0d      	ldr	r3, [pc, #52]	@ (8000464 <EXTI9_5_IRQHandler+0xcc>)
 800042e:	681b      	ldr	r3, [r3, #0]
 8000430:	2b01      	cmp	r3, #1
 8000432:	d102      	bne.n	800043a <EXTI9_5_IRQHandler+0xa2>
                    pause_song();
 8000434:	f000 fbb6 	bl	8000ba4 <pause_song>
 8000438:	e001      	b.n	800043e <EXTI9_5_IRQHandler+0xa6>
                } else {
                    play_song();
 800043a:	f000 fba3 	bl	8000b84 <play_song>
                }
            }
        }
        __HAL_GPIO_EXTI_CLEAR_IT(S1_Pin);
 800043e:	4b04      	ldr	r3, [pc, #16]	@ (8000450 <EXTI9_5_IRQHandler+0xb8>)
 8000440:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000444:	615a      	str	r2, [r3, #20]
    }
}
 8000446:	bf00      	nop
 8000448:	3708      	adds	r7, #8
 800044a:	46bd      	mov	sp, r7
 800044c:	bd80      	pop	{r7, pc}
 800044e:	bf00      	nop
 8000450:	40010400 	.word	0x40010400
 8000454:	20000290 	.word	0x20000290
 8000458:	20000078 	.word	0x20000078
 800045c:	2000007c 	.word	0x2000007c
 8000460:	08001fa0 	.word	0x08001fa0
 8000464:	20000288 	.word	0x20000288

08000468 <LED_Init>:

//Define the pin number for the LED (PA7)
#define LED_PIN 7

// Initialize the LED
void LED_Init(void) {
 8000468:	b480      	push	{r7}
 800046a:	af00      	add	r7, sp, #0
	RCC->AHB2ENR |= RCC_AHB2ENR_GPIOAEN;
 800046c:	4b1d      	ldr	r3, [pc, #116]	@ (80004e4 <LED_Init+0x7c>)
 800046e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000470:	4a1c      	ldr	r2, [pc, #112]	@ (80004e4 <LED_Init+0x7c>)
 8000472:	f043 0301 	orr.w	r3, r3, #1
 8000476:	64d3      	str	r3, [r2, #76]	@ 0x4c
	GPIOA->MODER &= ~(3U<<(2*LED_PIN));
 8000478:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800047c:	681b      	ldr	r3, [r3, #0]
 800047e:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000482:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000486:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= 1U<<(2*LED_PIN);
 8000488:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800048c:	681b      	ldr	r3, [r3, #0]
 800048e:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000492:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000496:	6013      	str	r3, [r2, #0]
	GPIOA->OSPEEDR &= ~(3U<<(2*LED_PIN));
 8000498:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800049c:	689b      	ldr	r3, [r3, #8]
 800049e:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80004a2:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80004a6:	6093      	str	r3, [r2, #8]
	GPIOA->OSPEEDR |= 3U<<(2*LED_PIN);
 80004a8:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80004ac:	689b      	ldr	r3, [r3, #8]
 80004ae:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80004b2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80004b6:	6093      	str	r3, [r2, #8]
	GPIOA->OTYPER &= ~(1U<<LED_PIN);
 80004b8:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80004bc:	685b      	ldr	r3, [r3, #4]
 80004be:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80004c2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80004c6:	6053      	str	r3, [r2, #4]
	GPIOA->PUPDR &= ~(3U<<(2*LED_PIN));
 80004c8:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80004cc:	68db      	ldr	r3, [r3, #12]
 80004ce:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80004d2:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80004d6:	60d3      	str	r3, [r2, #12]
}
 80004d8:	bf00      	nop
 80004da:	46bd      	mov	sp, r7
 80004dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004e0:	4770      	bx	lr
 80004e2:	bf00      	nop
 80004e4:	40021000 	.word	0x40021000

080004e8 <LED_On>:

// Turn the LED on
void LED_On(void) {
 80004e8:	b480      	push	{r7}
 80004ea:	af00      	add	r7, sp, #0
	GPIOA->ODR |= (1UL<<LED_PIN);
 80004ec:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80004f0:	695b      	ldr	r3, [r3, #20]
 80004f2:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80004f6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80004fa:	6153      	str	r3, [r2, #20]
}
 80004fc:	bf00      	nop
 80004fe:	46bd      	mov	sp, r7
 8000500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000504:	4770      	bx	lr

08000506 <LED_Off>:

// Turn the LED off
void LED_Off(void) {
 8000506:	b480      	push	{r7}
 8000508:	af00      	add	r7, sp, #0
	GPIOA->ODR &= ~(1UL<<LED_PIN);
 800050a:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800050e:	695b      	ldr	r3, [r3, #20]
 8000510:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000514:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8000518:	6153      	str	r3, [r2, #20]
}
 800051a:	bf00      	nop
 800051c:	46bd      	mov	sp, r7
 800051e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000522:	4770      	bx	lr

08000524 <LED_Toggle>:

// Toggle the LED state
void LED_Toggle(void) {
 8000524:	b480      	push	{r7}
 8000526:	af00      	add	r7, sp, #0
	GPIOA->ODR ^= (1UL<<LED_PIN);
 8000528:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800052c:	695b      	ldr	r3, [r3, #20]
 800052e:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000532:	f083 0380 	eor.w	r3, r3, #128	@ 0x80
 8000536:	6153      	str	r3, [r2, #20]
}
 8000538:	bf00      	nop
 800053a:	46bd      	mov	sp, r7
 800053c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000540:	4770      	bx	lr
	...

08000544 <UART2_Init>:
#define TX_PIN 2
//Define the pin number for UART Receive (RX)
#define RX_PIN 3

// Initialize UART2
void UART2_Init(void) {
 8000544:	b580      	push	{r7, lr}
 8000546:	af00      	add	r7, sp, #0
	RCC->APB1ENR1 |= RCC_APB1ENR1_USART2EN;
 8000548:	4b0e      	ldr	r3, [pc, #56]	@ (8000584 <UART2_Init+0x40>)
 800054a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800054c:	4a0d      	ldr	r2, [pc, #52]	@ (8000584 <UART2_Init+0x40>)
 800054e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000552:	6593      	str	r3, [r2, #88]	@ 0x58
	RCC->CCIPR &= ~RCC_CCIPR_USART2SEL;
 8000554:	4b0b      	ldr	r3, [pc, #44]	@ (8000584 <UART2_Init+0x40>)
 8000556:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800055a:	4a0a      	ldr	r2, [pc, #40]	@ (8000584 <UART2_Init+0x40>)
 800055c:	f023 030c 	bic.w	r3, r3, #12
 8000560:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
	RCC->CCIPR |= RCC_CCIPR_USART2SEL_0;
 8000564:	4b07      	ldr	r3, [pc, #28]	@ (8000584 <UART2_Init+0x40>)
 8000566:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800056a:	4a06      	ldr	r2, [pc, #24]	@ (8000584 <UART2_Init+0x40>)
 800056c:	f043 0304 	orr.w	r3, r3, #4
 8000570:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
	UART2_GPIO_Init();
 8000574:	f000 f80a 	bl	800058c <UART2_GPIO_Init>
	USART_Init(USART2);
 8000578:	4803      	ldr	r0, [pc, #12]	@ (8000588 <UART2_Init+0x44>)
 800057a:	f000 f84f 	bl	800061c <USART_Init>
}
 800057e:	bf00      	nop
 8000580:	bd80      	pop	{r7, pc}
 8000582:	bf00      	nop
 8000584:	40021000 	.word	0x40021000
 8000588:	40004400 	.word	0x40004400

0800058c <UART2_GPIO_Init>:

// Initialize GPIO pins for UART2
void UART2_GPIO_Init(void) {
 800058c:	b480      	push	{r7}
 800058e:	af00      	add	r7, sp, #0
	RCC->AHB2ENR |= RCC_AHB2ENR_GPIOAEN;
 8000590:	4b21      	ldr	r3, [pc, #132]	@ (8000618 <UART2_GPIO_Init+0x8c>)
 8000592:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000594:	4a20      	ldr	r2, [pc, #128]	@ (8000618 <UART2_GPIO_Init+0x8c>)
 8000596:	f043 0301 	orr.w	r3, r3, #1
 800059a:	64d3      	str	r3, [r2, #76]	@ 0x4c
	GPIOA->MODER &= ~(3<<(2*TX_PIN) | 3<<(2*RX_PIN));
 800059c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80005a0:	681b      	ldr	r3, [r3, #0]
 80005a2:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80005a6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80005aa:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= 2<<(2*TX_PIN) | 2<<(2*RX_PIN);
 80005ac:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80005b0:	681b      	ldr	r3, [r3, #0]
 80005b2:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80005b6:	f043 03a0 	orr.w	r3, r3, #160	@ 0xa0
 80005ba:	6013      	str	r3, [r2, #0]
	GPIOA->AFR[0] &= ~(0xF<<(4*TX_PIN) | 0xF<<(4*RX_PIN));
 80005bc:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80005c0:	6a1b      	ldr	r3, [r3, #32]
 80005c2:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80005c6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80005ca:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= 7<<(4*TX_PIN) | 7<<(4*RX_PIN);
 80005cc:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80005d0:	6a1b      	ldr	r3, [r3, #32]
 80005d2:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80005d6:	f443 43ee 	orr.w	r3, r3, #30464	@ 0x7700
 80005da:	6213      	str	r3, [r2, #32]
	GPIOA->OSPEEDR |= 3<<(2*TX_PIN) | 3<<(2*RX_PIN);
 80005dc:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80005e0:	689b      	ldr	r3, [r3, #8]
 80005e2:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80005e6:	f043 03f0 	orr.w	r3, r3, #240	@ 0xf0
 80005ea:	6093      	str	r3, [r2, #8]
	GPIOA->PUPDR &= ~(3<<(2*TX_PIN) | 3<<(2*RX_PIN));
 80005ec:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80005f0:	68db      	ldr	r3, [r3, #12]
 80005f2:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80005f6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80005fa:	60d3      	str	r3, [r2, #12]
	GPIOA->OTYPER &= ~(1<<TX_PIN | 1<<RX_PIN);
 80005fc:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000600:	685b      	ldr	r3, [r3, #4]
 8000602:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000606:	f023 030c 	bic.w	r3, r3, #12
 800060a:	6053      	str	r3, [r2, #4]
}
 800060c:	bf00      	nop
 800060e:	46bd      	mov	sp, r7
 8000610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000614:	4770      	bx	lr
 8000616:	bf00      	nop
 8000618:	40021000 	.word	0x40021000

0800061c <USART_Init>:

// Initialize USART with specified parameters
void USART_Init(USART_TypeDef * USARTx) {
 800061c:	b480      	push	{r7}
 800061e:	b083      	sub	sp, #12
 8000620:	af00      	add	r7, sp, #0
 8000622:	6078      	str	r0, [r7, #4]
	USARTx->CR1 &= ~USART_CR1_UE;
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	f023 0201 	bic.w	r2, r3, #1
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	601a      	str	r2, [r3, #0]
	USARTx->CR1 &= ~USART_CR1_M;
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	681b      	ldr	r3, [r3, #0]
 8000634:	f023 2210 	bic.w	r2, r3, #268439552	@ 0x10001000
 8000638:	687b      	ldr	r3, [r7, #4]
 800063a:	601a      	str	r2, [r3, #0]
	USARTx->CR1 &= ~USART_CR1_OVER8;
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	681b      	ldr	r3, [r3, #0]
 8000640:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	601a      	str	r2, [r3, #0]
	USARTx->CR2 &= ~USART_CR2_STOP;   
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	685b      	ldr	r3, [r3, #4]
 800064c:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8000650:	687b      	ldr	r3, [r7, #4]
 8000652:	605a      	str	r2, [r3, #4]
	USARTx->BRR = 0x208D;
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	f242 028d 	movw	r2, #8333	@ 0x208d
 800065a:	60da      	str	r2, [r3, #12]
	USARTx->CR1 |= (USART_CR1_RE | USART_CR1_TE);
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	681b      	ldr	r3, [r3, #0]
 8000660:	f043 020c 	orr.w	r2, r3, #12
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	601a      	str	r2, [r3, #0]
  if (USARTx == UART4){	
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	4a2c      	ldr	r2, [pc, #176]	@ (800071c <USART_Init+0x100>)
 800066c:	4293      	cmp	r3, r2
 800066e:	d129      	bne.n	80006c4 <USART_Init+0xa8>
		USARTx->CR1 |= USART_CR1_RXNEIE;
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	f043 0220 	orr.w	r2, r3, #32
 8000678:	687b      	ldr	r3, [r7, #4]
 800067a:	601a      	str	r2, [r3, #0]
		USARTx->CR1 &= ~USART_CR1_TCIE;
 800067c:	687b      	ldr	r3, [r7, #4]
 800067e:	681b      	ldr	r3, [r3, #0]
 8000680:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	601a      	str	r2, [r3, #0]
		USARTx->CR1 &= ~USART_CR1_IDLEIE;
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	f023 0210 	bic.w	r2, r3, #16
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	601a      	str	r2, [r3, #0]
		USARTx->CR1 &= ~USART_CR1_TXEIE;
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	601a      	str	r2, [r3, #0]
		USARTx->CR1 &= ~USART_CR1_PEIE;
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	601a      	str	r2, [r3, #0]
		USARTx->CR1 &= ~USART_CR2_LBDIE;
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	601a      	str	r2, [r3, #0]
		USARTx->CR1 &= ~USART_CR3_EIE;
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	681b      	ldr	r3, [r3, #0]
 80006bc:	f023 0201 	bic.w	r2, r3, #1
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	601a      	str	r2, [r3, #0]
	}
	if (USARTx == USART2){
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	4a16      	ldr	r2, [pc, #88]	@ (8000720 <USART_Init+0x104>)
 80006c8:	4293      	cmp	r3, r2
 80006ca:	d10b      	bne.n	80006e4 <USART_Init+0xc8>
		USARTx->ICR |= USART_ICR_TCCF;
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	6a1b      	ldr	r3, [r3, #32]
 80006d0:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	621a      	str	r2, [r3, #32]
		USART1->CR3 |= USART_CR3_DMAT | USART_CR3_DMAR;
 80006d8:	4b12      	ldr	r3, [pc, #72]	@ (8000724 <USART_Init+0x108>)
 80006da:	689b      	ldr	r3, [r3, #8]
 80006dc:	4a11      	ldr	r2, [pc, #68]	@ (8000724 <USART_Init+0x108>)
 80006de:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80006e2:	6093      	str	r3, [r2, #8]
	}
	USARTx->CR1  |= USART_CR1_UE;
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	681b      	ldr	r3, [r3, #0]
 80006e8:	f043 0201 	orr.w	r2, r3, #1
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	601a      	str	r2, [r3, #0]
	while ((USARTx->ISR & USART_ISR_TEACK) == 0);
 80006f0:	bf00      	nop
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	69db      	ldr	r3, [r3, #28]
 80006f6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	d0f9      	beq.n	80006f2 <USART_Init+0xd6>
	while ((USARTx->ISR & USART_ISR_REACK) == 0);
 80006fe:	bf00      	nop
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	69db      	ldr	r3, [r3, #28]
 8000704:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000708:	2b00      	cmp	r3, #0
 800070a:	d0f9      	beq.n	8000700 <USART_Init+0xe4>
}
 800070c:	bf00      	nop
 800070e:	bf00      	nop
 8000710:	370c      	adds	r7, #12
 8000712:	46bd      	mov	sp, r7
 8000714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000718:	4770      	bx	lr
 800071a:	bf00      	nop
 800071c:	40004c00 	.word	0x40004c00
 8000720:	40004400 	.word	0x40004400
 8000724:	40013800 	.word	0x40013800

08000728 <USART_Read_Nonblocking>:
	while (!(USARTx->ISR & USART_ISR_RXNE));
	return ((uint8_t)(USARTx->RDR & 0xFF));
}

// Read a byte from the specified USART non-blockingly
uint8_t USART_Read_Nonblocking(USART_TypeDef * USARTx) {
 8000728:	b480      	push	{r7}
 800072a:	b083      	sub	sp, #12
 800072c:	af00      	add	r7, sp, #0
 800072e:	6078      	str	r0, [r7, #4]
    if (USARTx->ISR & USART_ISR_RXNE) {
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	69db      	ldr	r3, [r3, #28]
 8000734:	f003 0320 	and.w	r3, r3, #32
 8000738:	2b00      	cmp	r3, #0
 800073a:	d004      	beq.n	8000746 <USART_Read_Nonblocking+0x1e>
        return ((uint8_t)(USARTx->RDR & 0xFF));
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8000740:	b29b      	uxth	r3, r3
 8000742:	b2db      	uxtb	r3, r3
 8000744:	e000      	b.n	8000748 <USART_Read_Nonblocking+0x20>
    }
    return 0;
 8000746:	2300      	movs	r3, #0
}
 8000748:	4618      	mov	r0, r3
 800074a:	370c      	adds	r7, #12
 800074c:	46bd      	mov	sp, r7
 800074e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000752:	4770      	bx	lr

08000754 <USART_Write>:

// Write a buffer of bytes to the specified USART
void USART_Write(USART_TypeDef * USARTx, uint8_t *buffer, uint32_t nBytes) {
 8000754:	b580      	push	{r7, lr}
 8000756:	b086      	sub	sp, #24
 8000758:	af00      	add	r7, sp, #0
 800075a:	60f8      	str	r0, [r7, #12]
 800075c:	60b9      	str	r1, [r7, #8]
 800075e:	607a      	str	r2, [r7, #4]
	int i;
	for (i = 0; i < nBytes; i++) {
 8000760:	2300      	movs	r3, #0
 8000762:	617b      	str	r3, [r7, #20]
 8000764:	e014      	b.n	8000790 <USART_Write+0x3c>
		while (!(USARTx->ISR & USART_ISR_TXE));
 8000766:	bf00      	nop
 8000768:	68fb      	ldr	r3, [r7, #12]
 800076a:	69db      	ldr	r3, [r3, #28]
 800076c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000770:	2b00      	cmp	r3, #0
 8000772:	d0f9      	beq.n	8000768 <USART_Write+0x14>
		USARTx->TDR = buffer[i] & 0xFF;
 8000774:	697b      	ldr	r3, [r7, #20]
 8000776:	68ba      	ldr	r2, [r7, #8]
 8000778:	4413      	add	r3, r2
 800077a:	781b      	ldrb	r3, [r3, #0]
 800077c:	461a      	mov	r2, r3
 800077e:	68fb      	ldr	r3, [r7, #12]
 8000780:	851a      	strh	r2, [r3, #40]	@ 0x28
		USART_Delay(300);
 8000782:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8000786:	f000 f819 	bl	80007bc <USART_Delay>
	for (i = 0; i < nBytes; i++) {
 800078a:	697b      	ldr	r3, [r7, #20]
 800078c:	3301      	adds	r3, #1
 800078e:	617b      	str	r3, [r7, #20]
 8000790:	697b      	ldr	r3, [r7, #20]
 8000792:	687a      	ldr	r2, [r7, #4]
 8000794:	429a      	cmp	r2, r3
 8000796:	d8e6      	bhi.n	8000766 <USART_Write+0x12>
	}
	while (!(USARTx->ISR & USART_ISR_TC));
 8000798:	bf00      	nop
 800079a:	68fb      	ldr	r3, [r7, #12]
 800079c:	69db      	ldr	r3, [r3, #28]
 800079e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	d0f9      	beq.n	800079a <USART_Write+0x46>
	USARTx->ISR &= ~USART_ISR_TC;
 80007a6:	68fb      	ldr	r3, [r7, #12]
 80007a8:	69db      	ldr	r3, [r3, #28]
 80007aa:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 80007ae:	68fb      	ldr	r3, [r7, #12]
 80007b0:	61da      	str	r2, [r3, #28]
}
 80007b2:	bf00      	nop
 80007b4:	3718      	adds	r7, #24
 80007b6:	46bd      	mov	sp, r7
 80007b8:	bd80      	pop	{r7, pc}
	...

080007bc <USART_Delay>:

// Delay function for USART operations
void USART_Delay(uint32_t us) {
 80007bc:	b480      	push	{r7}
 80007be:	b085      	sub	sp, #20
 80007c0:	af00      	add	r7, sp, #0
 80007c2:	6078      	str	r0, [r7, #4]
	uint32_t time = 100*us/7;    
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	2264      	movs	r2, #100	@ 0x64
 80007c8:	fb03 f202 	mul.w	r2, r3, r2
 80007cc:	4b0a      	ldr	r3, [pc, #40]	@ (80007f8 <USART_Delay+0x3c>)
 80007ce:	fba3 1302 	umull	r1, r3, r3, r2
 80007d2:	1ad2      	subs	r2, r2, r3
 80007d4:	0852      	lsrs	r2, r2, #1
 80007d6:	4413      	add	r3, r2
 80007d8:	089b      	lsrs	r3, r3, #2
 80007da:	60fb      	str	r3, [r7, #12]
	while(--time);   
 80007dc:	bf00      	nop
 80007de:	68fb      	ldr	r3, [r7, #12]
 80007e0:	3b01      	subs	r3, #1
 80007e2:	60fb      	str	r3, [r7, #12]
 80007e4:	68fb      	ldr	r3, [r7, #12]
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	d1f9      	bne.n	80007de <USART_Delay+0x22>
}
 80007ea:	bf00      	nop
 80007ec:	bf00      	nop
 80007ee:	3714      	adds	r7, #20
 80007f0:	46bd      	mov	sp, r7
 80007f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f6:	4770      	bx	lr
 80007f8:	24924925 	.word	0x24924925

080007fc <custom_printf>:
#include "string.h"
#include "UART.h"
#include "printf.h"

// Custom printf function to send formatted output via UART
void custom_printf(const char *format, ...) {
 80007fc:	b40f      	push	{r0, r1, r2, r3}
 80007fe:	b580      	push	{r7, lr}
 8000800:	f5ad 7d7c 	sub.w	sp, sp, #1008	@ 0x3f0
 8000804:	af00      	add	r7, sp, #0
    char buffer[BUFFER_SIZE];
    va_list args;
    va_start(args, format);
 8000806:	f507 727f 	add.w	r2, r7, #1020	@ 0x3fc
 800080a:	f507 737c 	add.w	r3, r7, #1008	@ 0x3f0
 800080e:	f5a3 737b 	sub.w	r3, r3, #1004	@ 0x3ec
 8000812:	601a      	str	r2, [r3, #0]
    vsnprintf(buffer, sizeof(buffer), format, args);
 8000814:	f507 737c 	add.w	r3, r7, #1008	@ 0x3f0
 8000818:	f5a3 737b 	sub.w	r3, r3, #1004	@ 0x3ec
 800081c:	f107 0008 	add.w	r0, r7, #8
 8000820:	681b      	ldr	r3, [r3, #0]
 8000822:	f8d7 23f8 	ldr.w	r2, [r7, #1016]	@ 0x3f8
 8000826:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800082a:	f000 ff1f 	bl	800166c <vsniprintf>
    va_end(args);
    USART_Write(USART2, (uint8_t*)buffer, strlen(buffer));
 800082e:	f107 0308 	add.w	r3, r7, #8
 8000832:	4618      	mov	r0, r3
 8000834:	f7ff fcd6 	bl	80001e4 <strlen>
 8000838:	4602      	mov	r2, r0
 800083a:	f107 0308 	add.w	r3, r7, #8
 800083e:	4619      	mov	r1, r3
 8000840:	4805      	ldr	r0, [pc, #20]	@ (8000858 <custom_printf+0x5c>)
 8000842:	f7ff ff87 	bl	8000754 <USART_Write>
}
 8000846:	bf00      	nop
 8000848:	f507 777c 	add.w	r7, r7, #1008	@ 0x3f0
 800084c:	46bd      	mov	sp, r7
 800084e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000852:	b004      	add	sp, #16
 8000854:	4770      	bx	lr
 8000856:	bf00      	nop
 8000858:	40004400 	.word	0x40004400

0800085c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800085c:	b480      	push	{r7}
 800085e:	b083      	sub	sp, #12
 8000860:	af00      	add	r7, sp, #0
 8000862:	4603      	mov	r3, r0
 8000864:	6039      	str	r1, [r7, #0]
 8000866:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000868:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800086c:	2b00      	cmp	r3, #0
 800086e:	db0a      	blt.n	8000886 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000870:	683b      	ldr	r3, [r7, #0]
 8000872:	b2da      	uxtb	r2, r3
 8000874:	490c      	ldr	r1, [pc, #48]	@ (80008a8 <__NVIC_SetPriority+0x4c>)
 8000876:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800087a:	0112      	lsls	r2, r2, #4
 800087c:	b2d2      	uxtb	r2, r2
 800087e:	440b      	add	r3, r1
 8000880:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000884:	e00a      	b.n	800089c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000886:	683b      	ldr	r3, [r7, #0]
 8000888:	b2da      	uxtb	r2, r3
 800088a:	4908      	ldr	r1, [pc, #32]	@ (80008ac <__NVIC_SetPriority+0x50>)
 800088c:	79fb      	ldrb	r3, [r7, #7]
 800088e:	f003 030f 	and.w	r3, r3, #15
 8000892:	3b04      	subs	r3, #4
 8000894:	0112      	lsls	r2, r2, #4
 8000896:	b2d2      	uxtb	r2, r2
 8000898:	440b      	add	r3, r1
 800089a:	761a      	strb	r2, [r3, #24]
}
 800089c:	bf00      	nop
 800089e:	370c      	adds	r7, #12
 80008a0:	46bd      	mov	sp, r7
 80008a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a6:	4770      	bx	lr
 80008a8:	e000e100 	.word	0xe000e100
 80008ac:	e000ed00 	.word	0xe000ed00

080008b0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b082      	sub	sp, #8
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	3b01      	subs	r3, #1
 80008bc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80008c0:	d301      	bcc.n	80008c6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80008c2:	2301      	movs	r3, #1
 80008c4:	e00f      	b.n	80008e6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80008c6:	4a0a      	ldr	r2, [pc, #40]	@ (80008f0 <SysTick_Config+0x40>)
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	3b01      	subs	r3, #1
 80008cc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80008ce:	210f      	movs	r1, #15
 80008d0:	f04f 30ff 	mov.w	r0, #4294967295
 80008d4:	f7ff ffc2 	bl	800085c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80008d8:	4b05      	ldr	r3, [pc, #20]	@ (80008f0 <SysTick_Config+0x40>)
 80008da:	2200      	movs	r2, #0
 80008dc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80008de:	4b04      	ldr	r3, [pc, #16]	@ (80008f0 <SysTick_Config+0x40>)
 80008e0:	2207      	movs	r2, #7
 80008e2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80008e4:	2300      	movs	r3, #0
}
 80008e6:	4618      	mov	r0, r3
 80008e8:	3708      	adds	r7, #8
 80008ea:	46bd      	mov	sp, r7
 80008ec:	bd80      	pop	{r7, pc}
 80008ee:	bf00      	nop
 80008f0:	e000e010 	.word	0xe000e010

080008f4 <init_all>:
int is_remote_mode = 1;
// Flag indicating if the system is in local control mode (1 = local mode active)
int is_local_mode = 0;

// Initializes the system components and song list
void init_all() {
 80008f4:	b5b0      	push	{r4, r5, r7, lr}
 80008f6:	af00      	add	r7, sp, #0
    System_Clock_Init();
 80008f8:	f000 fa96 	bl	8000e28 <System_Clock_Init>
    LED_Init();
 80008fc:	f7ff fdb4 	bl	8000468 <LED_Init>
    UART2_Init();
 8000900:	f7ff fe20 	bl	8000544 <UART2_Init>
    GPIO_Init();
 8000904:	f7ff fcd4 	bl	80002b0 <GPIO_Init>
    strcpy(song_list[0].title, "Twinkle Twinkle Little Star");
 8000908:	4a35      	ldr	r2, [pc, #212]	@ (80009e0 <init_all+0xec>)
 800090a:	4b36      	ldr	r3, [pc, #216]	@ (80009e4 <init_all+0xf0>)
 800090c:	4614      	mov	r4, r2
 800090e:	461d      	mov	r5, r3
 8000910:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000912:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000914:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000918:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    strcpy(song_list[0].copyright, "Jim Patterson");
 800091c:	4a32      	ldr	r2, [pc, #200]	@ (80009e8 <init_all+0xf4>)
 800091e:	4b33      	ldr	r3, [pc, #204]	@ (80009ec <init_all+0xf8>)
 8000920:	4614      	mov	r4, r2
 8000922:	cb07      	ldmia	r3!, {r0, r1, r2}
 8000924:	6020      	str	r0, [r4, #0]
 8000926:	6061      	str	r1, [r4, #4]
 8000928:	60a2      	str	r2, [r4, #8]
 800092a:	881b      	ldrh	r3, [r3, #0]
 800092c:	81a3      	strh	r3, [r4, #12]
    song_list[0].tempo = 391625;
 800092e:	4b2c      	ldr	r3, [pc, #176]	@ (80009e0 <init_all+0xec>)
 8000930:	4a2f      	ldr	r2, [pc, #188]	@ (80009f0 <init_all+0xfc>)
 8000932:	665a      	str	r2, [r3, #100]	@ 0x64
    strcpy(song_list[1].title, "Harry Potter Theme");
 8000934:	4a2f      	ldr	r2, [pc, #188]	@ (80009f4 <init_all+0x100>)
 8000936:	4b30      	ldr	r3, [pc, #192]	@ (80009f8 <init_all+0x104>)
 8000938:	4614      	mov	r4, r2
 800093a:	461d      	mov	r5, r3
 800093c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800093e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000940:	682b      	ldr	r3, [r5, #0]
 8000942:	461a      	mov	r2, r3
 8000944:	8022      	strh	r2, [r4, #0]
 8000946:	3402      	adds	r4, #2
 8000948:	0c1b      	lsrs	r3, r3, #16
 800094a:	7023      	strb	r3, [r4, #0]
    strcpy(song_list[1].copyright, "N/A");
 800094c:	4b2b      	ldr	r3, [pc, #172]	@ (80009fc <init_all+0x108>)
 800094e:	4a2c      	ldr	r2, [pc, #176]	@ (8000a00 <init_all+0x10c>)
 8000950:	6810      	ldr	r0, [r2, #0]
 8000952:	6018      	str	r0, [r3, #0]
    song_list[1].tempo = 310442;
 8000954:	4b22      	ldr	r3, [pc, #136]	@ (80009e0 <init_all+0xec>)
 8000956:	4a2b      	ldr	r2, [pc, #172]	@ (8000a04 <init_all+0x110>)
 8000958:	f8c3 20cc 	str.w	r2, [r3, #204]	@ 0xcc
    strcpy(song_list[2].title, "Twinkle Twinkle Little Star");
 800095c:	4a2a      	ldr	r2, [pc, #168]	@ (8000a08 <init_all+0x114>)
 800095e:	4b21      	ldr	r3, [pc, #132]	@ (80009e4 <init_all+0xf0>)
 8000960:	4614      	mov	r4, r2
 8000962:	461d      	mov	r5, r3
 8000964:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000966:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000968:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800096c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    strcpy(song_list[2].copyright, "Jim Patterson");
 8000970:	4a26      	ldr	r2, [pc, #152]	@ (8000a0c <init_all+0x118>)
 8000972:	4b1e      	ldr	r3, [pc, #120]	@ (80009ec <init_all+0xf8>)
 8000974:	4614      	mov	r4, r2
 8000976:	cb07      	ldmia	r3!, {r0, r1, r2}
 8000978:	6020      	str	r0, [r4, #0]
 800097a:	6061      	str	r1, [r4, #4]
 800097c:	60a2      	str	r2, [r4, #8]
 800097e:	881b      	ldrh	r3, [r3, #0]
 8000980:	81a3      	strh	r3, [r4, #12]
    song_list[2].tempo = 391625;
 8000982:	4b17      	ldr	r3, [pc, #92]	@ (80009e0 <init_all+0xec>)
 8000984:	4a1a      	ldr	r2, [pc, #104]	@ (80009f0 <init_all+0xfc>)
 8000986:	f8c3 2134 	str.w	r2, [r3, #308]	@ 0x134
    strcpy(song_list[3].title, "Legend of Zelda");
 800098a:	4a21      	ldr	r2, [pc, #132]	@ (8000a10 <init_all+0x11c>)
 800098c:	4b21      	ldr	r3, [pc, #132]	@ (8000a14 <init_all+0x120>)
 800098e:	4614      	mov	r4, r2
 8000990:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000992:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    strcpy(song_list[3].copyright, "N/A");
 8000996:	4b20      	ldr	r3, [pc, #128]	@ (8000a18 <init_all+0x124>)
 8000998:	4a19      	ldr	r2, [pc, #100]	@ (8000a00 <init_all+0x10c>)
 800099a:	6810      	ldr	r0, [r2, #0]
 800099c:	6018      	str	r0, [r3, #0]
    song_list[3].tempo = 31010390;
 800099e:	4b10      	ldr	r3, [pc, #64]	@ (80009e0 <init_all+0xec>)
 80009a0:	4a1e      	ldr	r2, [pc, #120]	@ (8000a1c <init_all+0x128>)
 80009a2:	f8c3 219c 	str.w	r2, [r3, #412]	@ 0x19c
    strcpy(song_list[4].title, "Game of Thrones");
 80009a6:	4a1e      	ldr	r2, [pc, #120]	@ (8000a20 <init_all+0x12c>)
 80009a8:	4b1e      	ldr	r3, [pc, #120]	@ (8000a24 <init_all+0x130>)
 80009aa:	4614      	mov	r4, r2
 80009ac:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80009ae:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    strcpy(song_list[4].copyright, "N/A");
 80009b2:	4b1d      	ldr	r3, [pc, #116]	@ (8000a28 <init_all+0x134>)
 80009b4:	4a12      	ldr	r2, [pc, #72]	@ (8000a00 <init_all+0x10c>)
 80009b6:	6810      	ldr	r0, [r2, #0]
 80009b8:	6018      	str	r0, [r3, #0]
    song_list[4].tempo = 305106213;
 80009ba:	4b09      	ldr	r3, [pc, #36]	@ (80009e0 <init_all+0xec>)
 80009bc:	4a1b      	ldr	r2, [pc, #108]	@ (8000a2c <init_all+0x138>)
 80009be:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    SysTick_Config(SystemCoreClock / 1000);
 80009c2:	4b1b      	ldr	r3, [pc, #108]	@ (8000a30 <init_all+0x13c>)
 80009c4:	681b      	ldr	r3, [r3, #0]
 80009c6:	4a1b      	ldr	r2, [pc, #108]	@ (8000a34 <init_all+0x140>)
 80009c8:	fba2 2303 	umull	r2, r3, r2, r3
 80009cc:	099b      	lsrs	r3, r3, #6
 80009ce:	4618      	mov	r0, r3
 80009d0:	f7ff ff6e 	bl	80008b0 <SysTick_Config>
    custom_printf("\r\n***REMOTE MODE ACTIVE***\r\n");
 80009d4:	4818      	ldr	r0, [pc, #96]	@ (8000a38 <init_all+0x144>)
 80009d6:	f7ff ff11 	bl	80007fc <custom_printf>
}
 80009da:	bf00      	nop
 80009dc:	bdb0      	pop	{r4, r5, r7, pc}
 80009de:	bf00      	nop
 80009e0:	20000080 	.word	0x20000080
 80009e4:	08001fa8 	.word	0x08001fa8
 80009e8:	200000b2 	.word	0x200000b2
 80009ec:	08001fc4 	.word	0x08001fc4
 80009f0:	0005f9c9 	.word	0x0005f9c9
 80009f4:	200000e8 	.word	0x200000e8
 80009f8:	08001fd4 	.word	0x08001fd4
 80009fc:	2000011a 	.word	0x2000011a
 8000a00:	08001fe8 	.word	0x08001fe8
 8000a04:	0004bcaa 	.word	0x0004bcaa
 8000a08:	20000150 	.word	0x20000150
 8000a0c:	20000182 	.word	0x20000182
 8000a10:	200001b8 	.word	0x200001b8
 8000a14:	08001fec 	.word	0x08001fec
 8000a18:	200001ea 	.word	0x200001ea
 8000a1c:	01d92e56 	.word	0x01d92e56
 8000a20:	20000220 	.word	0x20000220
 8000a24:	08001ffc 	.word	0x08001ffc
 8000a28:	20000252 	.word	0x20000252
 8000a2c:	122f8d25 	.word	0x122f8d25
 8000a30:	20000008 	.word	0x20000008
 8000a34:	10624dd3 	.word	0x10624dd3
 8000a38:	0800200c 	.word	0x0800200c

08000a3c <switch_to_remote_mode>:

// Switches to remote mode and stops the song
void switch_to_remote_mode() {
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	af00      	add	r7, sp, #0
    is_remote_mode = 1;
 8000a40:	4b07      	ldr	r3, [pc, #28]	@ (8000a60 <switch_to_remote_mode+0x24>)
 8000a42:	2201      	movs	r2, #1
 8000a44:	601a      	str	r2, [r3, #0]
    is_local_mode = 0;
 8000a46:	4b07      	ldr	r3, [pc, #28]	@ (8000a64 <switch_to_remote_mode+0x28>)
 8000a48:	2200      	movs	r2, #0
 8000a4a:	601a      	str	r2, [r3, #0]
    custom_printf("\r\n\n***REMOTE MODE ACTIVE***\r\n");
 8000a4c:	4806      	ldr	r0, [pc, #24]	@ (8000a68 <switch_to_remote_mode+0x2c>)
 8000a4e:	f7ff fed5 	bl	80007fc <custom_printf>
    custom_printf("\r\n>> ");
 8000a52:	4806      	ldr	r0, [pc, #24]	@ (8000a6c <switch_to_remote_mode+0x30>)
 8000a54:	f7ff fed2 	bl	80007fc <custom_printf>
    stop_song();
 8000a58:	f000 f8ba 	bl	8000bd0 <stop_song>
}
 8000a5c:	bf00      	nop
 8000a5e:	bd80      	pop	{r7, pc}
 8000a60:	20000004 	.word	0x20000004
 8000a64:	20000290 	.word	0x20000290
 8000a68:	0800202c 	.word	0x0800202c
 8000a6c:	0800204c 	.word	0x0800204c

08000a70 <switch_to_local_mode>:

// Switches to local mode and stops the song
void switch_to_local_mode() {
 8000a70:	b580      	push	{r7, lr}
 8000a72:	af00      	add	r7, sp, #0
    is_remote_mode = 0;
 8000a74:	4b07      	ldr	r3, [pc, #28]	@ (8000a94 <switch_to_local_mode+0x24>)
 8000a76:	2200      	movs	r2, #0
 8000a78:	601a      	str	r2, [r3, #0]
    is_local_mode = 1;
 8000a7a:	4b07      	ldr	r3, [pc, #28]	@ (8000a98 <switch_to_local_mode+0x28>)
 8000a7c:	2201      	movs	r2, #1
 8000a7e:	601a      	str	r2, [r3, #0]
    custom_printf("\r\n\n***MANUAL OVERRIDE MODE ACTIVE***\r\n");
 8000a80:	4806      	ldr	r0, [pc, #24]	@ (8000a9c <switch_to_local_mode+0x2c>)
 8000a82:	f7ff febb 	bl	80007fc <custom_printf>
    custom_printf("\r\n>> ");
 8000a86:	4806      	ldr	r0, [pc, #24]	@ (8000aa0 <switch_to_local_mode+0x30>)
 8000a88:	f7ff feb8 	bl	80007fc <custom_printf>
    stop_song();
 8000a8c:	f000 f8a0 	bl	8000bd0 <stop_song>
}
 8000a90:	bf00      	nop
 8000a92:	bd80      	pop	{r7, pc}
 8000a94:	20000004 	.word	0x20000004
 8000a98:	20000290 	.word	0x20000290
 8000a9c:	08002054 	.word	0x08002054
 8000aa0:	0800204c 	.word	0x0800204c

08000aa4 <display_help>:

// Displays the help menu for remote mode
void display_help() {
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	af00      	add	r7, sp, #0
    custom_printf("\r\n***REMOTE LED CONTROL MENU***\r\n\n");
 8000aa8:	480b      	ldr	r0, [pc, #44]	@ (8000ad8 <display_help+0x34>)
 8000aaa:	f7ff fea7 	bl	80007fc <custom_printf>
    custom_printf("Available User Commands:\r\n\n");
 8000aae:	480b      	ldr	r0, [pc, #44]	@ (8000adc <display_help+0x38>)
 8000ab0:	f7ff fea4 	bl	80007fc <custom_printf>
    custom_printf("HELP: Show the available user commands\r\n");
 8000ab4:	480a      	ldr	r0, [pc, #40]	@ (8000ae0 <display_help+0x3c>)
 8000ab6:	f7ff fea1 	bl	80007fc <custom_printf>
    custom_printf("NEXT: Show the next song information (LED nothing)\r\n");
 8000aba:	480a      	ldr	r0, [pc, #40]	@ (8000ae4 <display_help+0x40>)
 8000abc:	f7ff fe9e 	bl	80007fc <custom_printf>
    custom_printf("PLAY: Play the current song (LED on)\r\n");
 8000ac0:	4809      	ldr	r0, [pc, #36]	@ (8000ae8 <display_help+0x44>)
 8000ac2:	f7ff fe9b 	bl	80007fc <custom_printf>
    custom_printf("PAUSE: Pause the current song (LED flash)\r\n");
 8000ac6:	4809      	ldr	r0, [pc, #36]	@ (8000aec <display_help+0x48>)
 8000ac8:	f7ff fe98 	bl	80007fc <custom_printf>
    custom_printf("STOP: Stop the current song (LED off)\r\n\n");
 8000acc:	4808      	ldr	r0, [pc, #32]	@ (8000af0 <display_help+0x4c>)
 8000ace:	f7ff fe95 	bl	80007fc <custom_printf>
}
 8000ad2:	bf00      	nop
 8000ad4:	bd80      	pop	{r7, pc}
 8000ad6:	bf00      	nop
 8000ad8:	0800207c 	.word	0x0800207c
 8000adc:	080020a0 	.word	0x080020a0
 8000ae0:	080020bc 	.word	0x080020bc
 8000ae4:	080020e8 	.word	0x080020e8
 8000ae8:	08002120 	.word	0x08002120
 8000aec:	08002148 	.word	0x08002148
 8000af0:	08002174 	.word	0x08002174

08000af4 <next_help>:

// Displays the help menu when the HELP command is called
void next_help() {
 8000af4:	b580      	push	{r7, lr}
 8000af6:	af00      	add	r7, sp, #0
    custom_printf("\r\n\n***REMOTE LED CONTROL MENU***\r\n\n");
 8000af8:	480b      	ldr	r0, [pc, #44]	@ (8000b28 <next_help+0x34>)
 8000afa:	f7ff fe7f 	bl	80007fc <custom_printf>
    custom_printf("Available User Commands:\r\n\n");
 8000afe:	480b      	ldr	r0, [pc, #44]	@ (8000b2c <next_help+0x38>)
 8000b00:	f7ff fe7c 	bl	80007fc <custom_printf>
    custom_printf("HELP: Show available commands (LED nothing)\r\n");
 8000b04:	480a      	ldr	r0, [pc, #40]	@ (8000b30 <next_help+0x3c>)
 8000b06:	f7ff fe79 	bl	80007fc <custom_printf>
    custom_printf("NEXT: Show the next song information (LED nothing)\r\n");
 8000b0a:	480a      	ldr	r0, [pc, #40]	@ (8000b34 <next_help+0x40>)
 8000b0c:	f7ff fe76 	bl	80007fc <custom_printf>
    custom_printf("PLAY: Play the current song (LED on)\r\n");
 8000b10:	4809      	ldr	r0, [pc, #36]	@ (8000b38 <next_help+0x44>)
 8000b12:	f7ff fe73 	bl	80007fc <custom_printf>
    custom_printf("PAUSE: Pause the current song (LED flash)\r\n");
 8000b16:	4809      	ldr	r0, [pc, #36]	@ (8000b3c <next_help+0x48>)
 8000b18:	f7ff fe70 	bl	80007fc <custom_printf>
    custom_printf("STOP: Stop the current song (LED off)\r\n");
 8000b1c:	4808      	ldr	r0, [pc, #32]	@ (8000b40 <next_help+0x4c>)
 8000b1e:	f7ff fe6d 	bl	80007fc <custom_printf>
}
 8000b22:	bf00      	nop
 8000b24:	bd80      	pop	{r7, pc}
 8000b26:	bf00      	nop
 8000b28:	080021a0 	.word	0x080021a0
 8000b2c:	080020a0 	.word	0x080020a0
 8000b30:	080021c4 	.word	0x080021c4
 8000b34:	080020e8 	.word	0x080020e8
 8000b38:	08002120 	.word	0x08002120
 8000b3c:	08002148 	.word	0x08002148
 8000b40:	080021f4 	.word	0x080021f4

08000b44 <display_info>:

// Displays the song information
void display_info(const Song *song) {
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b082      	sub	sp, #8
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	6078      	str	r0, [r7, #4]
    custom_printf("\r\n\nSong Title: %s\r\n", song->title);
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	4619      	mov	r1, r3
 8000b50:	4809      	ldr	r0, [pc, #36]	@ (8000b78 <display_info+0x34>)
 8000b52:	f7ff fe53 	bl	80007fc <custom_printf>
    custom_printf("Song Copyright: %s\r\n", song->copyright);
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	3332      	adds	r3, #50	@ 0x32
 8000b5a:	4619      	mov	r1, r3
 8000b5c:	4807      	ldr	r0, [pc, #28]	@ (8000b7c <display_info+0x38>)
 8000b5e:	f7ff fe4d 	bl	80007fc <custom_printf>
    custom_printf("Song Tempo: %d\r", song->tempo);
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8000b66:	4619      	mov	r1, r3
 8000b68:	4805      	ldr	r0, [pc, #20]	@ (8000b80 <display_info+0x3c>)
 8000b6a:	f7ff fe47 	bl	80007fc <custom_printf>
}
 8000b6e:	bf00      	nop
 8000b70:	3708      	adds	r7, #8
 8000b72:	46bd      	mov	sp, r7
 8000b74:	bd80      	pop	{r7, pc}
 8000b76:	bf00      	nop
 8000b78:	0800221c 	.word	0x0800221c
 8000b7c:	08002230 	.word	0x08002230
 8000b80:	08002248 	.word	0x08002248

08000b84 <play_song>:

// Plays the current song by turning the LED on
void play_song() {
 8000b84:	b580      	push	{r7, lr}
 8000b86:	af00      	add	r7, sp, #0
    if (led_state != 1) {
 8000b88:	4b05      	ldr	r3, [pc, #20]	@ (8000ba0 <play_song+0x1c>)
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	2b01      	cmp	r3, #1
 8000b8e:	d004      	beq.n	8000b9a <play_song+0x16>
        led_state = 1;
 8000b90:	4b03      	ldr	r3, [pc, #12]	@ (8000ba0 <play_song+0x1c>)
 8000b92:	2201      	movs	r2, #1
 8000b94:	601a      	str	r2, [r3, #0]
        LED_On();
 8000b96:	f7ff fca7 	bl	80004e8 <LED_On>
    }
}
 8000b9a:	bf00      	nop
 8000b9c:	bd80      	pop	{r7, pc}
 8000b9e:	bf00      	nop
 8000ba0:	20000288 	.word	0x20000288

08000ba4 <pause_song>:

// Pauses the current song by changing the LED state
void pause_song() {
 8000ba4:	b480      	push	{r7}
 8000ba6:	af00      	add	r7, sp, #0
    if (led_state != 2) {
 8000ba8:	4b07      	ldr	r3, [pc, #28]	@ (8000bc8 <pause_song+0x24>)
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	2b02      	cmp	r3, #2
 8000bae:	d005      	beq.n	8000bbc <pause_song+0x18>
        led_state = 2;
 8000bb0:	4b05      	ldr	r3, [pc, #20]	@ (8000bc8 <pause_song+0x24>)
 8000bb2:	2202      	movs	r2, #2
 8000bb4:	601a      	str	r2, [r3, #0]
        flash_counter = 0;
 8000bb6:	4b05      	ldr	r3, [pc, #20]	@ (8000bcc <pause_song+0x28>)
 8000bb8:	2200      	movs	r2, #0
 8000bba:	601a      	str	r2, [r3, #0]
    }
}
 8000bbc:	bf00      	nop
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop
 8000bc8:	20000288 	.word	0x20000288
 8000bcc:	2000028c 	.word	0x2000028c

08000bd0 <stop_song>:

// Stops the current song by turning the LED off
void stop_song() {
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	af00      	add	r7, sp, #0
    if (led_state != 0) {
 8000bd4:	4b05      	ldr	r3, [pc, #20]	@ (8000bec <stop_song+0x1c>)
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d004      	beq.n	8000be6 <stop_song+0x16>
        led_state = 0;
 8000bdc:	4b03      	ldr	r3, [pc, #12]	@ (8000bec <stop_song+0x1c>)
 8000bde:	2200      	movs	r2, #0
 8000be0:	601a      	str	r2, [r3, #0]
        LED_Off();
 8000be2:	f7ff fc90 	bl	8000506 <LED_Off>
    }
}
 8000be6:	bf00      	nop
 8000be8:	bd80      	pop	{r7, pc}
 8000bea:	bf00      	nop
 8000bec:	20000288 	.word	0x20000288

08000bf0 <next_song>:

// Advances to the next song and displays its information
void next_song() {
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	af00      	add	r7, sp, #0
    current_song_index = (current_song_index + 1) % 5;
 8000bf4:	4b0d      	ldr	r3, [pc, #52]	@ (8000c2c <next_song+0x3c>)
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	1c59      	adds	r1, r3, #1
 8000bfa:	4b0d      	ldr	r3, [pc, #52]	@ (8000c30 <next_song+0x40>)
 8000bfc:	fb83 2301 	smull	r2, r3, r3, r1
 8000c00:	105a      	asrs	r2, r3, #1
 8000c02:	17cb      	asrs	r3, r1, #31
 8000c04:	1ad2      	subs	r2, r2, r3
 8000c06:	4613      	mov	r3, r2
 8000c08:	009b      	lsls	r3, r3, #2
 8000c0a:	4413      	add	r3, r2
 8000c0c:	1aca      	subs	r2, r1, r3
 8000c0e:	4b07      	ldr	r3, [pc, #28]	@ (8000c2c <next_song+0x3c>)
 8000c10:	601a      	str	r2, [r3, #0]
    display_info(&song_list[current_song_index]);
 8000c12:	4b06      	ldr	r3, [pc, #24]	@ (8000c2c <next_song+0x3c>)
 8000c14:	681b      	ldr	r3, [r3, #0]
 8000c16:	2268      	movs	r2, #104	@ 0x68
 8000c18:	fb02 f303 	mul.w	r3, r2, r3
 8000c1c:	4a05      	ldr	r2, [pc, #20]	@ (8000c34 <next_song+0x44>)
 8000c1e:	4413      	add	r3, r2
 8000c20:	4618      	mov	r0, r3
 8000c22:	f7ff ff8f 	bl	8000b44 <display_info>
}
 8000c26:	bf00      	nop
 8000c28:	bd80      	pop	{r7, pc}
 8000c2a:	bf00      	nop
 8000c2c:	20000000 	.word	0x20000000
 8000c30:	66666667 	.word	0x66666667
 8000c34:	20000080 	.word	0x20000080

08000c38 <toggle_flash>:

// Toggles the LED flashing for pause state
void toggle_flash() {
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	af00      	add	r7, sp, #0
    if (led_state == 2) {
 8000c3c:	4b09      	ldr	r3, [pc, #36]	@ (8000c64 <toggle_flash+0x2c>)
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	2b02      	cmp	r3, #2
 8000c42:	d10d      	bne.n	8000c60 <toggle_flash+0x28>
        flash_counter++;
 8000c44:	4b08      	ldr	r3, [pc, #32]	@ (8000c68 <toggle_flash+0x30>)
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	3301      	adds	r3, #1
 8000c4a:	4a07      	ldr	r2, [pc, #28]	@ (8000c68 <toggle_flash+0x30>)
 8000c4c:	6013      	str	r3, [r2, #0]
        if (flash_counter >= 10) {
 8000c4e:	4b06      	ldr	r3, [pc, #24]	@ (8000c68 <toggle_flash+0x30>)
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	2b09      	cmp	r3, #9
 8000c54:	dd04      	ble.n	8000c60 <toggle_flash+0x28>
            LED_Toggle();
 8000c56:	f7ff fc65 	bl	8000524 <LED_Toggle>
            flash_counter = 0;
 8000c5a:	4b03      	ldr	r3, [pc, #12]	@ (8000c68 <toggle_flash+0x30>)
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	601a      	str	r2, [r3, #0]
        }
    }
}
 8000c60:	bf00      	nop
 8000c62:	bd80      	pop	{r7, pc}
 8000c64:	20000288 	.word	0x20000288
 8000c68:	2000028c 	.word	0x2000028c

08000c6c <SysTick_Handler>:

// SysTick interrupt handler for managing timing
void SysTick_Handler() {
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	af00      	add	r7, sp, #0
    static uint32_t ms_count = 0;
    ms_count++;
 8000c70:	4b08      	ldr	r3, [pc, #32]	@ (8000c94 <SysTick_Handler+0x28>)
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	3301      	adds	r3, #1
 8000c76:	4a07      	ldr	r2, [pc, #28]	@ (8000c94 <SysTick_Handler+0x28>)
 8000c78:	6013      	str	r3, [r2, #0]
    if (ms_count >= 1000) {
 8000c7a:	4b06      	ldr	r3, [pc, #24]	@ (8000c94 <SysTick_Handler+0x28>)
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000c82:	d304      	bcc.n	8000c8e <SysTick_Handler+0x22>
        toggle_flash();
 8000c84:	f7ff ffd8 	bl	8000c38 <toggle_flash>
        ms_count = 0;
 8000c88:	4b02      	ldr	r3, [pc, #8]	@ (8000c94 <SysTick_Handler+0x28>)
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	601a      	str	r2, [r3, #0]
    }
}
 8000c8e:	bf00      	nop
 8000c90:	bd80      	pop	{r7, pc}
 8000c92:	bf00      	nop
 8000c94:	20000294 	.word	0x20000294

08000c98 <process_command>:

// Processes user commands based on the current mode
void process_command(const char *command) {
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b082      	sub	sp, #8
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	6078      	str	r0, [r7, #4]
    if (is_remote_mode) {
 8000ca0:	4b20      	ldr	r3, [pc, #128]	@ (8000d24 <process_command+0x8c>)
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d035      	beq.n	8000d14 <process_command+0x7c>
        if (strcmp(command, "HELP") == 0) {
 8000ca8:	491f      	ldr	r1, [pc, #124]	@ (8000d28 <process_command+0x90>)
 8000caa:	6878      	ldr	r0, [r7, #4]
 8000cac:	f7ff fa90 	bl	80001d0 <strcmp>
 8000cb0:	4603      	mov	r3, r0
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d102      	bne.n	8000cbc <process_command+0x24>
            next_help();
 8000cb6:	f7ff ff1d 	bl	8000af4 <next_help>
            custom_printf("\r\n\nInvalid User Command\r");
        }
    } else {
        custom_printf("\r\n\nTerminal Input Disabled\r");
    }
}
 8000cba:	e02e      	b.n	8000d1a <process_command+0x82>
        } else if (strcmp(command, "NEXT") == 0) {
 8000cbc:	491b      	ldr	r1, [pc, #108]	@ (8000d2c <process_command+0x94>)
 8000cbe:	6878      	ldr	r0, [r7, #4]
 8000cc0:	f7ff fa86 	bl	80001d0 <strcmp>
 8000cc4:	4603      	mov	r3, r0
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d102      	bne.n	8000cd0 <process_command+0x38>
            next_song();
 8000cca:	f7ff ff91 	bl	8000bf0 <next_song>
}
 8000cce:	e024      	b.n	8000d1a <process_command+0x82>
        } else if (strcmp(command, "PLAY") == 0) {
 8000cd0:	4917      	ldr	r1, [pc, #92]	@ (8000d30 <process_command+0x98>)
 8000cd2:	6878      	ldr	r0, [r7, #4]
 8000cd4:	f7ff fa7c 	bl	80001d0 <strcmp>
 8000cd8:	4603      	mov	r3, r0
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d102      	bne.n	8000ce4 <process_command+0x4c>
            play_song();
 8000cde:	f7ff ff51 	bl	8000b84 <play_song>
}
 8000ce2:	e01a      	b.n	8000d1a <process_command+0x82>
        } else if (strcmp(command, "PAUSE") == 0) {
 8000ce4:	4913      	ldr	r1, [pc, #76]	@ (8000d34 <process_command+0x9c>)
 8000ce6:	6878      	ldr	r0, [r7, #4]
 8000ce8:	f7ff fa72 	bl	80001d0 <strcmp>
 8000cec:	4603      	mov	r3, r0
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d102      	bne.n	8000cf8 <process_command+0x60>
            pause_song();
 8000cf2:	f7ff ff57 	bl	8000ba4 <pause_song>
}
 8000cf6:	e010      	b.n	8000d1a <process_command+0x82>
        } else if (strcmp(command, "STOP") == 0) {
 8000cf8:	490f      	ldr	r1, [pc, #60]	@ (8000d38 <process_command+0xa0>)
 8000cfa:	6878      	ldr	r0, [r7, #4]
 8000cfc:	f7ff fa68 	bl	80001d0 <strcmp>
 8000d00:	4603      	mov	r3, r0
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d102      	bne.n	8000d0c <process_command+0x74>
            stop_song();
 8000d06:	f7ff ff63 	bl	8000bd0 <stop_song>
}
 8000d0a:	e006      	b.n	8000d1a <process_command+0x82>
            custom_printf("\r\n\nInvalid User Command\r");
 8000d0c:	480b      	ldr	r0, [pc, #44]	@ (8000d3c <process_command+0xa4>)
 8000d0e:	f7ff fd75 	bl	80007fc <custom_printf>
}
 8000d12:	e002      	b.n	8000d1a <process_command+0x82>
        custom_printf("\r\n\nTerminal Input Disabled\r");
 8000d14:	480a      	ldr	r0, [pc, #40]	@ (8000d40 <process_command+0xa8>)
 8000d16:	f7ff fd71 	bl	80007fc <custom_printf>
}
 8000d1a:	bf00      	nop
 8000d1c:	3708      	adds	r7, #8
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	bd80      	pop	{r7, pc}
 8000d22:	bf00      	nop
 8000d24:	20000004 	.word	0x20000004
 8000d28:	08002258 	.word	0x08002258
 8000d2c:	08002260 	.word	0x08002260
 8000d30:	08002268 	.word	0x08002268
 8000d34:	08002270 	.word	0x08002270
 8000d38:	08002278 	.word	0x08002278
 8000d3c:	08002280 	.word	0x08002280
 8000d40:	0800229c 	.word	0x0800229c

08000d44 <run_loop>:

// Main loop for processing commands
void run_loop() {
 8000d44:	b580      	push	{r7, lr}
 8000d46:	f5ad 7d7c 	sub.w	sp, sp, #1008	@ 0x3f0
 8000d4a:	af00      	add	r7, sp, #0
    char command[BUFFER_SIZE];
    uint8_t index = 0;
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	f887 33ef 	strb.w	r3, [r7, #1007]	@ 0x3ef
    char ch;
    display_help();
 8000d52:	f7ff fea7 	bl	8000aa4 <display_help>
    custom_printf(">> ");
 8000d56:	482a      	ldr	r0, [pc, #168]	@ (8000e00 <run_loop+0xbc>)
 8000d58:	f7ff fd50 	bl	80007fc <custom_printf>
    while (1) {
        memset(command, 0, sizeof(command));
 8000d5c:	1d3b      	adds	r3, r7, #4
 8000d5e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000d62:	2100      	movs	r1, #0
 8000d64:	4618      	mov	r0, r3
 8000d66:	f000 fc8f 	bl	8001688 <memset>
        index = 0;
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	f887 33ef 	strb.w	r3, [r7, #1007]	@ 0x3ef
        while (1) {
            ch = USART_Read_Nonblocking(USART2);
 8000d70:	4824      	ldr	r0, [pc, #144]	@ (8000e04 <run_loop+0xc0>)
 8000d72:	f7ff fcd9 	bl	8000728 <USART_Read_Nonblocking>
 8000d76:	4603      	mov	r3, r0
 8000d78:	f887 33ee 	strb.w	r3, [r7, #1006]	@ 0x3ee
            if (ch != 0) {
 8000d7c:	f897 33ee 	ldrb.w	r3, [r7, #1006]	@ 0x3ee
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d0f5      	beq.n	8000d70 <run_loop+0x2c>
                if (ch == '\b') {
 8000d84:	f897 33ee 	ldrb.w	r3, [r7, #1006]	@ 0x3ee
 8000d88:	2b08      	cmp	r3, #8
 8000d8a:	d10c      	bne.n	8000da6 <run_loop+0x62>
                    if (index > 0) {
 8000d8c:	f897 33ef 	ldrb.w	r3, [r7, #1007]	@ 0x3ef
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d0ed      	beq.n	8000d70 <run_loop+0x2c>
                        index--;
 8000d94:	f897 33ef 	ldrb.w	r3, [r7, #1007]	@ 0x3ef
 8000d98:	3b01      	subs	r3, #1
 8000d9a:	f887 33ef 	strb.w	r3, [r7, #1007]	@ 0x3ef
                        custom_printf("\b \b");
 8000d9e:	481a      	ldr	r0, [pc, #104]	@ (8000e08 <run_loop+0xc4>)
 8000da0:	f7ff fd2c 	bl	80007fc <custom_printf>
 8000da4:	e7e4      	b.n	8000d70 <run_loop+0x2c>
                    }
                } else {
                    if (ch == '\n' || ch == '\r') {
 8000da6:	f897 33ee 	ldrb.w	r3, [r7, #1006]	@ 0x3ee
 8000daa:	2b0a      	cmp	r3, #10
 8000dac:	d003      	beq.n	8000db6 <run_loop+0x72>
 8000dae:	f897 33ee 	ldrb.w	r3, [r7, #1006]	@ 0x3ee
 8000db2:	2b0d      	cmp	r3, #13
 8000db4:	d108      	bne.n	8000dc8 <run_loop+0x84>
                        command[index] = '\0';
 8000db6:	f897 33ef 	ldrb.w	r3, [r7, #1007]	@ 0x3ef
 8000dba:	f507 727c 	add.w	r2, r7, #1008	@ 0x3f0
 8000dbe:	f5a2 727b 	sub.w	r2, r2, #1004	@ 0x3ec
 8000dc2:	2100      	movs	r1, #0
 8000dc4:	54d1      	strb	r1, [r2, r3]
                        break;
 8000dc6:	e013      	b.n	8000df0 <run_loop+0xac>
                    }
                    if (index < sizeof(command) - 1) {
                        command[index++] = ch;
 8000dc8:	f897 33ef 	ldrb.w	r3, [r7, #1007]	@ 0x3ef
 8000dcc:	1c5a      	adds	r2, r3, #1
 8000dce:	f887 23ef 	strb.w	r2, [r7, #1007]	@ 0x3ef
 8000dd2:	4619      	mov	r1, r3
 8000dd4:	f507 737c 	add.w	r3, r7, #1008	@ 0x3f0
 8000dd8:	f5a3 737b 	sub.w	r3, r3, #1004	@ 0x3ec
 8000ddc:	f897 23ee 	ldrb.w	r2, [r7, #1006]	@ 0x3ee
 8000de0:	545a      	strb	r2, [r3, r1]
                        custom_printf("%c", ch);
 8000de2:	f897 33ee 	ldrb.w	r3, [r7, #1006]	@ 0x3ee
 8000de6:	4619      	mov	r1, r3
 8000de8:	4808      	ldr	r0, [pc, #32]	@ (8000e0c <run_loop+0xc8>)
 8000dea:	f7ff fd07 	bl	80007fc <custom_printf>
            ch = USART_Read_Nonblocking(USART2);
 8000dee:	e7bf      	b.n	8000d70 <run_loop+0x2c>
                    }
                }
            }
        }
        process_command(command);
 8000df0:	1d3b      	adds	r3, r7, #4
 8000df2:	4618      	mov	r0, r3
 8000df4:	f7ff ff50 	bl	8000c98 <process_command>
        custom_printf("\r\n\n>> ");
 8000df8:	4805      	ldr	r0, [pc, #20]	@ (8000e10 <run_loop+0xcc>)
 8000dfa:	f7ff fcff 	bl	80007fc <custom_printf>
        memset(command, 0, sizeof(command));
 8000dfe:	e7ad      	b.n	8000d5c <run_loop+0x18>
 8000e00:	080022b8 	.word	0x080022b8
 8000e04:	40004400 	.word	0x40004400
 8000e08:	080022bc 	.word	0x080022bc
 8000e0c:	080022c0 	.word	0x080022c0
 8000e10:	080022c4 	.word	0x080022c4

08000e14 <run_main>:
    }
}

// Main function for the program
int run_main() {
 8000e14:	b580      	push	{r7, lr}
 8000e16:	af00      	add	r7, sp, #0
    init_all();
 8000e18:	f7ff fd6c 	bl	80008f4 <init_all>
    run_loop();
 8000e1c:	f7ff ff92 	bl	8000d44 <run_loop>
    return 0;
 8000e20:	2300      	movs	r3, #0
}
 8000e22:	4618      	mov	r0, r3
 8000e24:	bd80      	pop	{r7, pc}
	...

08000e28 <System_Clock_Init>:

//******************************************************************************************
// Switch the PLL source from MSI to HSI, and select the PLL as SYSCLK source.
//******************************************************************************************

void System_Clock_Init(void){
 8000e28:	b480      	push	{r7}
 8000e2a:	b083      	sub	sp, #12
 8000e2c:	af00      	add	r7, sp, #0
	uint32_t HSITrim;
	// To correctly read data from FLASH memory, the number of wait states (LATENCY)
  // must be correctly programmed according to the frequency of the CPU clock
  // (HCLK) and the supply voltage of the device.		
	FLASH->ACR &= ~FLASH_ACR_LATENCY;
 8000e2e:	4b6b      	ldr	r3, [pc, #428]	@ (8000fdc <System_Clock_Init+0x1b4>)
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	4a6a      	ldr	r2, [pc, #424]	@ (8000fdc <System_Clock_Init+0x1b4>)
 8000e34:	f023 0307 	bic.w	r3, r3, #7
 8000e38:	6013      	str	r3, [r2, #0]
	FLASH->ACR |=  FLASH_ACR_LATENCY_2WS;
 8000e3a:	4b68      	ldr	r3, [pc, #416]	@ (8000fdc <System_Clock_Init+0x1b4>)
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	4a67      	ldr	r2, [pc, #412]	@ (8000fdc <System_Clock_Init+0x1b4>)
 8000e40:	f043 0302 	orr.w	r3, r3, #2
 8000e44:	6013      	str	r3, [r2, #0]
	// Enable the Internal High Speed oscillator (HSI
	RCC->CR |= RCC_CR_HSION;
 8000e46:	4b66      	ldr	r3, [pc, #408]	@ (8000fe0 <System_Clock_Init+0x1b8>)
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	4a65      	ldr	r2, [pc, #404]	@ (8000fe0 <System_Clock_Init+0x1b8>)
 8000e4c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000e50:	6013      	str	r3, [r2, #0]
	while((RCC->CR & RCC_CR_HSIRDY) == 0);
 8000e52:	bf00      	nop
 8000e54:	4b62      	ldr	r3, [pc, #392]	@ (8000fe0 <System_Clock_Init+0x1b8>)
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d0f9      	beq.n	8000e54 <System_Clock_Init+0x2c>
	// Adjusts the Internal High Speed oscillator (HSI) calibration value
	// RC oscillator frequencies are factory calibrated by ST for 1 % accuracy at 25oC
	// After reset, the factory calibration value is loaded in HSICAL[7:0] of RCC_ICSCR	
	HSITrim = 16; // user-programmable trimming value that is added to HSICAL[7:0] in ICSCR.
 8000e60:	2310      	movs	r3, #16
 8000e62:	607b      	str	r3, [r7, #4]
	RCC->ICSCR &= ~RCC_ICSCR_HSITRIM;
 8000e64:	4b5e      	ldr	r3, [pc, #376]	@ (8000fe0 <System_Clock_Init+0x1b8>)
 8000e66:	685b      	ldr	r3, [r3, #4]
 8000e68:	4a5d      	ldr	r2, [pc, #372]	@ (8000fe0 <System_Clock_Init+0x1b8>)
 8000e6a:	f023 53f8 	bic.w	r3, r3, #520093696	@ 0x1f000000
 8000e6e:	6053      	str	r3, [r2, #4]
	RCC->ICSCR |= HSITrim << 24;
 8000e70:	4b5b      	ldr	r3, [pc, #364]	@ (8000fe0 <System_Clock_Init+0x1b8>)
 8000e72:	685a      	ldr	r2, [r3, #4]
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	061b      	lsls	r3, r3, #24
 8000e78:	4959      	ldr	r1, [pc, #356]	@ (8000fe0 <System_Clock_Init+0x1b8>)
 8000e7a:	4313      	orrs	r3, r2
 8000e7c:	604b      	str	r3, [r1, #4]
	RCC->CR    &= ~RCC_CR_PLLON; 
 8000e7e:	4b58      	ldr	r3, [pc, #352]	@ (8000fe0 <System_Clock_Init+0x1b8>)
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	4a57      	ldr	r2, [pc, #348]	@ (8000fe0 <System_Clock_Init+0x1b8>)
 8000e84:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8000e88:	6013      	str	r3, [r2, #0]
	while((RCC->CR & RCC_CR_PLLRDY) == RCC_CR_PLLRDY);
 8000e8a:	bf00      	nop
 8000e8c:	4b54      	ldr	r3, [pc, #336]	@ (8000fe0 <System_Clock_Init+0x1b8>)
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000e94:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8000e98:	d0f8      	beq.n	8000e8c <System_Clock_Init+0x64>
	// Select clock source to PLL
	RCC->PLLCFGR &= ~RCC_PLLCFGR_PLLSRC;
 8000e9a:	4b51      	ldr	r3, [pc, #324]	@ (8000fe0 <System_Clock_Init+0x1b8>)
 8000e9c:	68db      	ldr	r3, [r3, #12]
 8000e9e:	4a50      	ldr	r2, [pc, #320]	@ (8000fe0 <System_Clock_Init+0x1b8>)
 8000ea0:	f023 0303 	bic.w	r3, r3, #3
 8000ea4:	60d3      	str	r3, [r2, #12]
	RCC->PLLCFGR |= RCC_PLLCFGR_PLLSRC_HSI; // 00 = No clock, 01 = MSI, 10 = HSI, 11 = HSE
 8000ea6:	4b4e      	ldr	r3, [pc, #312]	@ (8000fe0 <System_Clock_Init+0x1b8>)
 8000ea8:	68db      	ldr	r3, [r3, #12]
 8000eaa:	4a4d      	ldr	r2, [pc, #308]	@ (8000fe0 <System_Clock_Init+0x1b8>)
 8000eac:	f043 0302 	orr.w	r3, r3, #2
 8000eb0:	60d3      	str	r3, [r2, #12]
	// Make PLL as 80 MHz
	// f(VCO clock) = f(PLL clock input) * (PLLN / PLLM) = 16MHz * 20/2 = 160 MHz
	// f(PLL_R) = f(VCO clock) / PLLR = 160MHz/2 = 80MHz
	RCC->PLLCFGR = (RCC->PLLCFGR & ~RCC_PLLCFGR_PLLN) | 20U << 8;
 8000eb2:	4b4b      	ldr	r3, [pc, #300]	@ (8000fe0 <System_Clock_Init+0x1b8>)
 8000eb4:	68db      	ldr	r3, [r3, #12]
 8000eb6:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8000eba:	4a49      	ldr	r2, [pc, #292]	@ (8000fe0 <System_Clock_Init+0x1b8>)
 8000ebc:	f443 53a0 	orr.w	r3, r3, #5120	@ 0x1400
 8000ec0:	60d3      	str	r3, [r2, #12]
	RCC->PLLCFGR = (RCC->PLLCFGR & ~RCC_PLLCFGR_PLLM) | 1U << 4; // 000: PLLM = 1, 001: PLLM = 2, 010: PLLM = 3, 011: PLLM = 4, 100: PLLM = 5, 101: PLLM = 6, 110: PLLM = 7, 111: PLLM = 8
 8000ec2:	4b47      	ldr	r3, [pc, #284]	@ (8000fe0 <System_Clock_Init+0x1b8>)
 8000ec4:	68db      	ldr	r3, [r3, #12]
 8000ec6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8000eca:	4a45      	ldr	r2, [pc, #276]	@ (8000fe0 <System_Clock_Init+0x1b8>)
 8000ecc:	f043 0310 	orr.w	r3, r3, #16
 8000ed0:	60d3      	str	r3, [r2, #12]
	RCC->PLLCFGR &= ~RCC_PLLCFGR_PLLR;  // 00: PLLR = 2, 01: PLLR = 4, 10: PLLR = 6, 11: PLLR = 8	
 8000ed2:	4b43      	ldr	r3, [pc, #268]	@ (8000fe0 <System_Clock_Init+0x1b8>)
 8000ed4:	68db      	ldr	r3, [r3, #12]
 8000ed6:	4a42      	ldr	r2, [pc, #264]	@ (8000fe0 <System_Clock_Init+0x1b8>)
 8000ed8:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8000edc:	60d3      	str	r3, [r2, #12]
	RCC->PLLCFGR |= RCC_PLLCFGR_PLLREN; // Enable Main PLL PLLCLK output 
 8000ede:	4b40      	ldr	r3, [pc, #256]	@ (8000fe0 <System_Clock_Init+0x1b8>)
 8000ee0:	68db      	ldr	r3, [r3, #12]
 8000ee2:	4a3f      	ldr	r2, [pc, #252]	@ (8000fe0 <System_Clock_Init+0x1b8>)
 8000ee4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000ee8:	60d3      	str	r3, [r2, #12]
	RCC->CR   |= RCC_CR_PLLON; 
 8000eea:	4b3d      	ldr	r3, [pc, #244]	@ (8000fe0 <System_Clock_Init+0x1b8>)
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	4a3c      	ldr	r2, [pc, #240]	@ (8000fe0 <System_Clock_Init+0x1b8>)
 8000ef0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000ef4:	6013      	str	r3, [r2, #0]
	while((RCC->CR & RCC_CR_PLLRDY) == 0);
 8000ef6:	bf00      	nop
 8000ef8:	4b39      	ldr	r3, [pc, #228]	@ (8000fe0 <System_Clock_Init+0x1b8>)
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d0f9      	beq.n	8000ef8 <System_Clock_Init+0xd0>
	// Select PLL selected as system clock
	RCC->CFGR &= ~RCC_CFGR_SW;
 8000f04:	4b36      	ldr	r3, [pc, #216]	@ (8000fe0 <System_Clock_Init+0x1b8>)
 8000f06:	689b      	ldr	r3, [r3, #8]
 8000f08:	4a35      	ldr	r2, [pc, #212]	@ (8000fe0 <System_Clock_Init+0x1b8>)
 8000f0a:	f023 0303 	bic.w	r3, r3, #3
 8000f0e:	6093      	str	r3, [r2, #8]
	RCC->CFGR |= RCC_CFGR_SW_PLL; // 00: MSI, 01:HSI, 10: HSE, 11: PLL
 8000f10:	4b33      	ldr	r3, [pc, #204]	@ (8000fe0 <System_Clock_Init+0x1b8>)
 8000f12:	689b      	ldr	r3, [r3, #8]
 8000f14:	4a32      	ldr	r2, [pc, #200]	@ (8000fe0 <System_Clock_Init+0x1b8>)
 8000f16:	f043 0303 	orr.w	r3, r3, #3
 8000f1a:	6093      	str	r3, [r2, #8]
	// Wait until System Clock has been selected
	while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_PLL);
 8000f1c:	bf00      	nop
 8000f1e:	4b30      	ldr	r3, [pc, #192]	@ (8000fe0 <System_Clock_Init+0x1b8>)
 8000f20:	689b      	ldr	r3, [r3, #8]
 8000f22:	f003 030c 	and.w	r3, r3, #12
 8000f26:	2b0c      	cmp	r3, #12
 8000f28:	d1f9      	bne.n	8000f1e <System_Clock_Init+0xf6>
	// The maximum frequency of the AHB, the APB1 and the APB2 domains is 80 MHz.
	RCC->CFGR &= ~RCC_CFGR_HPRE;  // AHB prescaler = 1; SYSCLK not divided
 8000f2a:	4b2d      	ldr	r3, [pc, #180]	@ (8000fe0 <System_Clock_Init+0x1b8>)
 8000f2c:	689b      	ldr	r3, [r3, #8]
 8000f2e:	4a2c      	ldr	r2, [pc, #176]	@ (8000fe0 <System_Clock_Init+0x1b8>)
 8000f30:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8000f34:	6093      	str	r3, [r2, #8]
	RCC->CFGR &= ~RCC_CFGR_PPRE1; // APB high-speed prescaler (APB1) = 1, HCLK not divided
 8000f36:	4b2a      	ldr	r3, [pc, #168]	@ (8000fe0 <System_Clock_Init+0x1b8>)
 8000f38:	689b      	ldr	r3, [r3, #8]
 8000f3a:	4a29      	ldr	r2, [pc, #164]	@ (8000fe0 <System_Clock_Init+0x1b8>)
 8000f3c:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8000f40:	6093      	str	r3, [r2, #8]
	RCC->CFGR &= ~RCC_CFGR_PPRE2; // APB high-speed prescaler (APB2) = 1, HCLK not divided
 8000f42:	4b27      	ldr	r3, [pc, #156]	@ (8000fe0 <System_Clock_Init+0x1b8>)
 8000f44:	689b      	ldr	r3, [r3, #8]
 8000f46:	4a26      	ldr	r2, [pc, #152]	@ (8000fe0 <System_Clock_Init+0x1b8>)
 8000f48:	f423 5360 	bic.w	r3, r3, #14336	@ 0x3800
 8000f4c:	6093      	str	r3, [r2, #8]
	// RCC->PLLCFGR &= ~RCC_PLLCFGR_PLLN;
	// RCC->PLLCFGR &= ~RCC_PLLCFGR_PLLP; 
	// RCC->PLLCFGR &= ~RCC_PLLCFGR_PLLQ;	
	// RCC->PLLCFGR |= RCC_PLLCFGR_PLLPEN; // Enable Main PLL PLLSAI3CLK output enable
	// RCC->PLLCFGR |= RCC_PLLCFGR_PLLQEN; // Enable Main PLL PLL48M1CLK output enable
	RCC->CR &= ~RCC_CR_PLLSAI1ON;  // SAI1 PLL enable
 8000f4e:	4b24      	ldr	r3, [pc, #144]	@ (8000fe0 <System_Clock_Init+0x1b8>)
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	4a23      	ldr	r2, [pc, #140]	@ (8000fe0 <System_Clock_Init+0x1b8>)
 8000f54:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8000f58:	6013      	str	r3, [r2, #0]
	while ( (RCC->CR & RCC_CR_PLLSAI1ON) == RCC_CR_PLLSAI1ON );
 8000f5a:	bf00      	nop
 8000f5c:	4b20      	ldr	r3, [pc, #128]	@ (8000fe0 <System_Clock_Init+0x1b8>)
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8000f64:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8000f68:	d0f8      	beq.n	8000f5c <System_Clock_Init+0x134>
	// 8 MHz * 24 / 17 = 11.294MHz
	// f(VCOSAI1 clock) = f(PLL clock input) *  (PLLSAI1N / PLLM)
	// PLLSAI1CLK: f(PLLSAI1_P) = f(VCOSAI1 clock) / PLLSAI1P
	// PLLUSB2CLK: f(PLLSAI1_Q) = f(VCOSAI1 clock) / PLLSAI1Q
	// PLLADC1CLK: f(PLLSAI1_R) = f(VCOSAI1 clock) / PLLSAI1R
	RCC->PLLSAI1CFGR &= ~RCC_PLLSAI1CFGR_PLLSAI1N;
 8000f6a:	4b1d      	ldr	r3, [pc, #116]	@ (8000fe0 <System_Clock_Init+0x1b8>)
 8000f6c:	691b      	ldr	r3, [r3, #16]
 8000f6e:	4a1c      	ldr	r2, [pc, #112]	@ (8000fe0 <System_Clock_Init+0x1b8>)
 8000f70:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8000f74:	6113      	str	r3, [r2, #16]
	RCC->PLLSAI1CFGR |= 24U<<8;
 8000f76:	4b1a      	ldr	r3, [pc, #104]	@ (8000fe0 <System_Clock_Init+0x1b8>)
 8000f78:	691b      	ldr	r3, [r3, #16]
 8000f7a:	4a19      	ldr	r2, [pc, #100]	@ (8000fe0 <System_Clock_Init+0x1b8>)
 8000f7c:	f443 53c0 	orr.w	r3, r3, #6144	@ 0x1800
 8000f80:	6113      	str	r3, [r2, #16]
	// SAI1PLL division factor for PLLSAI1CLK
	// 0: PLLSAI1P = 7, 1: PLLSAI1P = 17
	RCC->PLLSAI1CFGR |= RCC_PLLSAI1CFGR_PLLSAI1P;
 8000f82:	4b17      	ldr	r3, [pc, #92]	@ (8000fe0 <System_Clock_Init+0x1b8>)
 8000f84:	691b      	ldr	r3, [r3, #16]
 8000f86:	4a16      	ldr	r2, [pc, #88]	@ (8000fe0 <System_Clock_Init+0x1b8>)
 8000f88:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000f8c:	6113      	str	r3, [r2, #16]
	RCC->PLLSAI1CFGR |= RCC_PLLSAI1CFGR_PLLSAI1PEN;
 8000f8e:	4b14      	ldr	r3, [pc, #80]	@ (8000fe0 <System_Clock_Init+0x1b8>)
 8000f90:	691b      	ldr	r3, [r3, #16]
 8000f92:	4a13      	ldr	r2, [pc, #76]	@ (8000fe0 <System_Clock_Init+0x1b8>)
 8000f94:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000f98:	6113      	str	r3, [r2, #16]
	// PLLSAI1 division factor for PLLADC1CLK (ADC clock)
	// 00: PLLSAI1R = 2, 01: PLLSAI1R = 4, 10: PLLSAI1R = 6, 11: PLLSAI1R = 8
	// RCC->PLLSAI1CFGR &= ~RCC_PLLSAI1CFGR_PLLSAI1R; 
	// RCC->PLLSAI1CFGR |= U<<25;
	// RCC->PLLSAI1CFGR |= RCC_PLLSAI1CFGR_PLLSAI1REN;
	RCC->CR |= RCC_CR_PLLSAI1ON;  // SAI1 PLL enable
 8000f9a:	4b11      	ldr	r3, [pc, #68]	@ (8000fe0 <System_Clock_Init+0x1b8>)
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	4a10      	ldr	r2, [pc, #64]	@ (8000fe0 <System_Clock_Init+0x1b8>)
 8000fa0:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8000fa4:	6013      	str	r3, [r2, #0]
	while ( (RCC->CR & RCC_CR_PLLSAI1ON) == 0);
 8000fa6:	bf00      	nop
 8000fa8:	4b0d      	ldr	r3, [pc, #52]	@ (8000fe0 <System_Clock_Init+0x1b8>)
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d0f9      	beq.n	8000fa8 <System_Clock_Init+0x180>
	// SAI1 clock source selection
	// 00: PLLSAI1 "P" clock (PLLSAI1CLK) selected as SAI1 clock
	// 01: PLLSAI2 "P" clock (PLLSAI2CLK) selected as SAI1 clock
	// 10: PLL "P" clock (PLLSAI3CLK) selected as SAI1 clock
	// 11: External input SAI1_EXTCLK selected as SAI1 clock	
	RCC->CCIPR &= ~RCC_CCIPR_SAI1SEL;
 8000fb4:	4b0a      	ldr	r3, [pc, #40]	@ (8000fe0 <System_Clock_Init+0x1b8>)
 8000fb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000fba:	4a09      	ldr	r2, [pc, #36]	@ (8000fe0 <System_Clock_Init+0x1b8>)
 8000fbc:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8000fc0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
	RCC->APB2ENR |= RCC_APB2ENR_SAI1EN;
 8000fc4:	4b06      	ldr	r3, [pc, #24]	@ (8000fe0 <System_Clock_Init+0x1b8>)
 8000fc6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000fc8:	4a05      	ldr	r2, [pc, #20]	@ (8000fe0 <System_Clock_Init+0x1b8>)
 8000fca:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000fce:	6613      	str	r3, [r2, #96]	@ 0x60
}
 8000fd0:	bf00      	nop
 8000fd2:	370c      	adds	r7, #12
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fda:	4770      	bx	lr
 8000fdc:	40022000 	.word	0x40022000
 8000fe0:	40021000 	.word	0x40021000

08000fe4 <_sbrk>:
 * @param incr Memory size
 * @return Pointer to allocated memory
 */

void *_sbrk(ptrdiff_t incr)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b086      	sub	sp, #24
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
  extern uint8_t _end;
  extern uint8_t _estack;
  extern uint32_t _Min_Stack_Size;
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000fec:	4a14      	ldr	r2, [pc, #80]	@ (8001040 <_sbrk+0x5c>)
 8000fee:	4b15      	ldr	r3, [pc, #84]	@ (8001044 <_sbrk+0x60>)
 8000ff0:	1ad3      	subs	r3, r2, r3
 8000ff2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ff4:	697b      	ldr	r3, [r7, #20]
 8000ff6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;
  if (NULL == __sbrk_heap_end)
 8000ff8:	4b13      	ldr	r3, [pc, #76]	@ (8001048 <_sbrk+0x64>)
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d102      	bne.n	8001006 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001000:	4b11      	ldr	r3, [pc, #68]	@ (8001048 <_sbrk+0x64>)
 8001002:	4a12      	ldr	r2, [pc, #72]	@ (800104c <_sbrk+0x68>)
 8001004:	601a      	str	r2, [r3, #0]
  }
  if (__sbrk_heap_end + incr > max_heap)
 8001006:	4b10      	ldr	r3, [pc, #64]	@ (8001048 <_sbrk+0x64>)
 8001008:	681a      	ldr	r2, [r3, #0]
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	4413      	add	r3, r2
 800100e:	693a      	ldr	r2, [r7, #16]
 8001010:	429a      	cmp	r2, r3
 8001012:	d207      	bcs.n	8001024 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001014:	f000 fb40 	bl	8001698 <__errno>
 8001018:	4603      	mov	r3, r0
 800101a:	220c      	movs	r2, #12
 800101c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800101e:	f04f 33ff 	mov.w	r3, #4294967295
 8001022:	e009      	b.n	8001038 <_sbrk+0x54>
  }
  prev_heap_end = __sbrk_heap_end;
 8001024:	4b08      	ldr	r3, [pc, #32]	@ (8001048 <_sbrk+0x64>)
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800102a:	4b07      	ldr	r3, [pc, #28]	@ (8001048 <_sbrk+0x64>)
 800102c:	681a      	ldr	r2, [r3, #0]
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	4413      	add	r3, r2
 8001032:	4a05      	ldr	r2, [pc, #20]	@ (8001048 <_sbrk+0x64>)
 8001034:	6013      	str	r3, [r2, #0]
  return (void *)prev_heap_end;
 8001036:	68fb      	ldr	r3, [r7, #12]
}
 8001038:	4618      	mov	r0, r3
 800103a:	3718      	adds	r7, #24
 800103c:	46bd      	mov	sp, r7
 800103e:	bd80      	pop	{r7, pc}
 8001040:	20018000 	.word	0x20018000
 8001044:	00000400 	.word	0x00000400
 8001048:	20000298 	.word	0x20000298
 800104c:	200003e8 	.word	0x200003e8

08001050 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001050:	b480      	push	{r7}
 8001052:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001054:	4b17      	ldr	r3, [pc, #92]	@ (80010b4 <SystemInit+0x64>)
 8001056:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800105a:	4a16      	ldr	r2, [pc, #88]	@ (80010b4 <SystemInit+0x64>)
 800105c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001060:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001064:	4b14      	ldr	r3, [pc, #80]	@ (80010b8 <SystemInit+0x68>)
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	4a13      	ldr	r2, [pc, #76]	@ (80010b8 <SystemInit+0x68>)
 800106a:	f043 0301 	orr.w	r3, r3, #1
 800106e:	6013      	str	r3, [r2, #0]
  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8001070:	4b11      	ldr	r3, [pc, #68]	@ (80010b8 <SystemInit+0x68>)
 8001072:	2200      	movs	r2, #0
 8001074:	609a      	str	r2, [r3, #8]
  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8001076:	4b10      	ldr	r3, [pc, #64]	@ (80010b8 <SystemInit+0x68>)
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	4a0f      	ldr	r2, [pc, #60]	@ (80010b8 <SystemInit+0x68>)
 800107c:	f023 53a8 	bic.w	r3, r3, #352321536	@ 0x15000000
 8001080:	f423 2310 	bic.w	r3, r3, #589824	@ 0x90000
 8001084:	6013      	str	r3, [r2, #0]
  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8001086:	4b0c      	ldr	r3, [pc, #48]	@ (80010b8 <SystemInit+0x68>)
 8001088:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800108c:	60da      	str	r2, [r3, #12]
  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800108e:	4b0a      	ldr	r3, [pc, #40]	@ (80010b8 <SystemInit+0x68>)
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	4a09      	ldr	r2, [pc, #36]	@ (80010b8 <SystemInit+0x68>)
 8001094:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001098:	6013      	str	r3, [r2, #0]
  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 800109a:	4b07      	ldr	r3, [pc, #28]	@ (80010b8 <SystemInit+0x68>)
 800109c:	2200      	movs	r2, #0
 800109e:	619a      	str	r2, [r3, #24]
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80010a0:	4b04      	ldr	r3, [pc, #16]	@ (80010b4 <SystemInit+0x64>)
 80010a2:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80010a6:	609a      	str	r2, [r3, #8]
#endif
}
 80010a8:	bf00      	nop
 80010aa:	46bd      	mov	sp, r7
 80010ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b0:	4770      	bx	lr
 80010b2:	bf00      	nop
 80010b4:	e000ed00 	.word	0xe000ed00
 80010b8:	40021000 	.word	0x40021000

080010bc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80010bc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80010f4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80010c0:	f7ff ffc6 	bl	8001050 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80010c4:	480c      	ldr	r0, [pc, #48]	@ (80010f8 <LoopForever+0x6>)
  ldr r1, =_edata
 80010c6:	490d      	ldr	r1, [pc, #52]	@ (80010fc <LoopForever+0xa>)
  ldr r2, =_sidata
 80010c8:	4a0d      	ldr	r2, [pc, #52]	@ (8001100 <LoopForever+0xe>)
  movs r3, #0
 80010ca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80010cc:	e002      	b.n	80010d4 <LoopCopyDataInit>

080010ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010d2:	3304      	adds	r3, #4

080010d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010d8:	d3f9      	bcc.n	80010ce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010da:	4a0a      	ldr	r2, [pc, #40]	@ (8001104 <LoopForever+0x12>)
  ldr r4, =_ebss
 80010dc:	4c0a      	ldr	r4, [pc, #40]	@ (8001108 <LoopForever+0x16>)
  movs r3, #0
 80010de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010e0:	e001      	b.n	80010e6 <LoopFillZerobss>

080010e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010e4:	3204      	adds	r2, #4

080010e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010e8:	d3fb      	bcc.n	80010e2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80010ea:	f000 fadb 	bl	80016a4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80010ee:	f7ff f8d7 	bl	80002a0 <main>

080010f2 <LoopForever>:

LoopForever:
    b LoopForever
 80010f2:	e7fe      	b.n	80010f2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80010f4:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80010f8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010fc:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8001100:	08002310 	.word	0x08002310
  ldr r2, =_sbss
 8001104:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8001108:	200003e8 	.word	0x200003e8

0800110c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800110c:	e7fe      	b.n	800110c <ADC1_2_IRQHandler>
	...

08001110 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001110:	b480      	push	{r7}
 8001112:	af00      	add	r7, sp, #0
  return uwTick;
 8001114:	4b03      	ldr	r3, [pc, #12]	@ (8001124 <HAL_GetTick+0x14>)
 8001116:	681b      	ldr	r3, [r3, #0]
}
 8001118:	4618      	mov	r0, r3
 800111a:	46bd      	mov	sp, r7
 800111c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001120:	4770      	bx	lr
 8001122:	bf00      	nop
 8001124:	2000029c 	.word	0x2000029c

08001128 <__NVIC_GetPriorityGrouping>:
{
 8001128:	b480      	push	{r7}
 800112a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800112c:	4b04      	ldr	r3, [pc, #16]	@ (8001140 <__NVIC_GetPriorityGrouping+0x18>)
 800112e:	68db      	ldr	r3, [r3, #12]
 8001130:	0a1b      	lsrs	r3, r3, #8
 8001132:	f003 0307 	and.w	r3, r3, #7
}
 8001136:	4618      	mov	r0, r3
 8001138:	46bd      	mov	sp, r7
 800113a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113e:	4770      	bx	lr
 8001140:	e000ed00 	.word	0xe000ed00

08001144 <__NVIC_EnableIRQ>:
{
 8001144:	b480      	push	{r7}
 8001146:	b083      	sub	sp, #12
 8001148:	af00      	add	r7, sp, #0
 800114a:	4603      	mov	r3, r0
 800114c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800114e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001152:	2b00      	cmp	r3, #0
 8001154:	db0b      	blt.n	800116e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001156:	79fb      	ldrb	r3, [r7, #7]
 8001158:	f003 021f 	and.w	r2, r3, #31
 800115c:	4907      	ldr	r1, [pc, #28]	@ (800117c <__NVIC_EnableIRQ+0x38>)
 800115e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001162:	095b      	lsrs	r3, r3, #5
 8001164:	2001      	movs	r0, #1
 8001166:	fa00 f202 	lsl.w	r2, r0, r2
 800116a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800116e:	bf00      	nop
 8001170:	370c      	adds	r7, #12
 8001172:	46bd      	mov	sp, r7
 8001174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001178:	4770      	bx	lr
 800117a:	bf00      	nop
 800117c:	e000e100 	.word	0xe000e100

08001180 <__NVIC_SetPriority>:
{
 8001180:	b480      	push	{r7}
 8001182:	b083      	sub	sp, #12
 8001184:	af00      	add	r7, sp, #0
 8001186:	4603      	mov	r3, r0
 8001188:	6039      	str	r1, [r7, #0]
 800118a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800118c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001190:	2b00      	cmp	r3, #0
 8001192:	db0a      	blt.n	80011aa <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001194:	683b      	ldr	r3, [r7, #0]
 8001196:	b2da      	uxtb	r2, r3
 8001198:	490c      	ldr	r1, [pc, #48]	@ (80011cc <__NVIC_SetPriority+0x4c>)
 800119a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800119e:	0112      	lsls	r2, r2, #4
 80011a0:	b2d2      	uxtb	r2, r2
 80011a2:	440b      	add	r3, r1
 80011a4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80011a8:	e00a      	b.n	80011c0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011aa:	683b      	ldr	r3, [r7, #0]
 80011ac:	b2da      	uxtb	r2, r3
 80011ae:	4908      	ldr	r1, [pc, #32]	@ (80011d0 <__NVIC_SetPriority+0x50>)
 80011b0:	79fb      	ldrb	r3, [r7, #7]
 80011b2:	f003 030f 	and.w	r3, r3, #15
 80011b6:	3b04      	subs	r3, #4
 80011b8:	0112      	lsls	r2, r2, #4
 80011ba:	b2d2      	uxtb	r2, r2
 80011bc:	440b      	add	r3, r1
 80011be:	761a      	strb	r2, [r3, #24]
}
 80011c0:	bf00      	nop
 80011c2:	370c      	adds	r7, #12
 80011c4:	46bd      	mov	sp, r7
 80011c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ca:	4770      	bx	lr
 80011cc:	e000e100 	.word	0xe000e100
 80011d0:	e000ed00 	.word	0xe000ed00

080011d4 <NVIC_EncodePriority>:
{
 80011d4:	b480      	push	{r7}
 80011d6:	b089      	sub	sp, #36	@ 0x24
 80011d8:	af00      	add	r7, sp, #0
 80011da:	60f8      	str	r0, [r7, #12]
 80011dc:	60b9      	str	r1, [r7, #8]
 80011de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011e0:	68fb      	ldr	r3, [r7, #12]
 80011e2:	f003 0307 	and.w	r3, r3, #7
 80011e6:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011e8:	69fb      	ldr	r3, [r7, #28]
 80011ea:	f1c3 0307 	rsb	r3, r3, #7
 80011ee:	2b04      	cmp	r3, #4
 80011f0:	bf28      	it	cs
 80011f2:	2304      	movcs	r3, #4
 80011f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011f6:	69fb      	ldr	r3, [r7, #28]
 80011f8:	3304      	adds	r3, #4
 80011fa:	2b06      	cmp	r3, #6
 80011fc:	d902      	bls.n	8001204 <NVIC_EncodePriority+0x30>
 80011fe:	69fb      	ldr	r3, [r7, #28]
 8001200:	3b03      	subs	r3, #3
 8001202:	e000      	b.n	8001206 <NVIC_EncodePriority+0x32>
 8001204:	2300      	movs	r3, #0
 8001206:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001208:	f04f 32ff 	mov.w	r2, #4294967295
 800120c:	69bb      	ldr	r3, [r7, #24]
 800120e:	fa02 f303 	lsl.w	r3, r2, r3
 8001212:	43da      	mvns	r2, r3
 8001214:	68bb      	ldr	r3, [r7, #8]
 8001216:	401a      	ands	r2, r3
 8001218:	697b      	ldr	r3, [r7, #20]
 800121a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800121c:	f04f 31ff 	mov.w	r1, #4294967295
 8001220:	697b      	ldr	r3, [r7, #20]
 8001222:	fa01 f303 	lsl.w	r3, r1, r3
 8001226:	43d9      	mvns	r1, r3
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800122c:	4313      	orrs	r3, r2
}
 800122e:	4618      	mov	r0, r3
 8001230:	3724      	adds	r7, #36	@ 0x24
 8001232:	46bd      	mov	sp, r7
 8001234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001238:	4770      	bx	lr

0800123a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800123a:	b580      	push	{r7, lr}
 800123c:	b086      	sub	sp, #24
 800123e:	af00      	add	r7, sp, #0
 8001240:	4603      	mov	r3, r0
 8001242:	60b9      	str	r1, [r7, #8]
 8001244:	607a      	str	r2, [r7, #4]
 8001246:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001248:	2300      	movs	r3, #0
 800124a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800124c:	f7ff ff6c 	bl	8001128 <__NVIC_GetPriorityGrouping>
 8001250:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001252:	687a      	ldr	r2, [r7, #4]
 8001254:	68b9      	ldr	r1, [r7, #8]
 8001256:	6978      	ldr	r0, [r7, #20]
 8001258:	f7ff ffbc 	bl	80011d4 <NVIC_EncodePriority>
 800125c:	4602      	mov	r2, r0
 800125e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001262:	4611      	mov	r1, r2
 8001264:	4618      	mov	r0, r3
 8001266:	f7ff ff8b 	bl	8001180 <__NVIC_SetPriority>
}
 800126a:	bf00      	nop
 800126c:	3718      	adds	r7, #24
 800126e:	46bd      	mov	sp, r7
 8001270:	bd80      	pop	{r7, pc}

08001272 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001272:	b580      	push	{r7, lr}
 8001274:	b082      	sub	sp, #8
 8001276:	af00      	add	r7, sp, #0
 8001278:	4603      	mov	r3, r0
 800127a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800127c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001280:	4618      	mov	r0, r3
 8001282:	f7ff ff5f 	bl	8001144 <__NVIC_EnableIRQ>
}
 8001286:	bf00      	nop
 8001288:	3708      	adds	r7, #8
 800128a:	46bd      	mov	sp, r7
 800128c:	bd80      	pop	{r7, pc}
	...

08001290 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001290:	b480      	push	{r7}
 8001292:	b087      	sub	sp, #28
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
 8001298:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800129a:	2300      	movs	r3, #0
 800129c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800129e:	e17f      	b.n	80015a0 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80012a0:	683b      	ldr	r3, [r7, #0]
 80012a2:	681a      	ldr	r2, [r3, #0]
 80012a4:	2101      	movs	r1, #1
 80012a6:	697b      	ldr	r3, [r7, #20]
 80012a8:	fa01 f303 	lsl.w	r3, r1, r3
 80012ac:	4013      	ands	r3, r2
 80012ae:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	f000 8171 	beq.w	800159a <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80012b8:	683b      	ldr	r3, [r7, #0]
 80012ba:	685b      	ldr	r3, [r3, #4]
 80012bc:	f003 0303 	and.w	r3, r3, #3
 80012c0:	2b01      	cmp	r3, #1
 80012c2:	d005      	beq.n	80012d0 <HAL_GPIO_Init+0x40>
 80012c4:	683b      	ldr	r3, [r7, #0]
 80012c6:	685b      	ldr	r3, [r3, #4]
 80012c8:	f003 0303 	and.w	r3, r3, #3
 80012cc:	2b02      	cmp	r3, #2
 80012ce:	d130      	bne.n	8001332 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	689b      	ldr	r3, [r3, #8]
 80012d4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80012d6:	697b      	ldr	r3, [r7, #20]
 80012d8:	005b      	lsls	r3, r3, #1
 80012da:	2203      	movs	r2, #3
 80012dc:	fa02 f303 	lsl.w	r3, r2, r3
 80012e0:	43db      	mvns	r3, r3
 80012e2:	693a      	ldr	r2, [r7, #16]
 80012e4:	4013      	ands	r3, r2
 80012e6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80012e8:	683b      	ldr	r3, [r7, #0]
 80012ea:	68da      	ldr	r2, [r3, #12]
 80012ec:	697b      	ldr	r3, [r7, #20]
 80012ee:	005b      	lsls	r3, r3, #1
 80012f0:	fa02 f303 	lsl.w	r3, r2, r3
 80012f4:	693a      	ldr	r2, [r7, #16]
 80012f6:	4313      	orrs	r3, r2
 80012f8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	693a      	ldr	r2, [r7, #16]
 80012fe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	685b      	ldr	r3, [r3, #4]
 8001304:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001306:	2201      	movs	r2, #1
 8001308:	697b      	ldr	r3, [r7, #20]
 800130a:	fa02 f303 	lsl.w	r3, r2, r3
 800130e:	43db      	mvns	r3, r3
 8001310:	693a      	ldr	r2, [r7, #16]
 8001312:	4013      	ands	r3, r2
 8001314:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001316:	683b      	ldr	r3, [r7, #0]
 8001318:	685b      	ldr	r3, [r3, #4]
 800131a:	091b      	lsrs	r3, r3, #4
 800131c:	f003 0201 	and.w	r2, r3, #1
 8001320:	697b      	ldr	r3, [r7, #20]
 8001322:	fa02 f303 	lsl.w	r3, r2, r3
 8001326:	693a      	ldr	r2, [r7, #16]
 8001328:	4313      	orrs	r3, r2
 800132a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	693a      	ldr	r2, [r7, #16]
 8001330:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001332:	683b      	ldr	r3, [r7, #0]
 8001334:	685b      	ldr	r3, [r3, #4]
 8001336:	f003 0303 	and.w	r3, r3, #3
 800133a:	2b03      	cmp	r3, #3
 800133c:	d118      	bne.n	8001370 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001342:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001344:	2201      	movs	r2, #1
 8001346:	697b      	ldr	r3, [r7, #20]
 8001348:	fa02 f303 	lsl.w	r3, r2, r3
 800134c:	43db      	mvns	r3, r3
 800134e:	693a      	ldr	r2, [r7, #16]
 8001350:	4013      	ands	r3, r2
 8001352:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001354:	683b      	ldr	r3, [r7, #0]
 8001356:	685b      	ldr	r3, [r3, #4]
 8001358:	08db      	lsrs	r3, r3, #3
 800135a:	f003 0201 	and.w	r2, r3, #1
 800135e:	697b      	ldr	r3, [r7, #20]
 8001360:	fa02 f303 	lsl.w	r3, r2, r3
 8001364:	693a      	ldr	r2, [r7, #16]
 8001366:	4313      	orrs	r3, r2
 8001368:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	693a      	ldr	r2, [r7, #16]
 800136e:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001370:	683b      	ldr	r3, [r7, #0]
 8001372:	685b      	ldr	r3, [r3, #4]
 8001374:	f003 0303 	and.w	r3, r3, #3
 8001378:	2b03      	cmp	r3, #3
 800137a:	d017      	beq.n	80013ac <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	68db      	ldr	r3, [r3, #12]
 8001380:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001382:	697b      	ldr	r3, [r7, #20]
 8001384:	005b      	lsls	r3, r3, #1
 8001386:	2203      	movs	r2, #3
 8001388:	fa02 f303 	lsl.w	r3, r2, r3
 800138c:	43db      	mvns	r3, r3
 800138e:	693a      	ldr	r2, [r7, #16]
 8001390:	4013      	ands	r3, r2
 8001392:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001394:	683b      	ldr	r3, [r7, #0]
 8001396:	689a      	ldr	r2, [r3, #8]
 8001398:	697b      	ldr	r3, [r7, #20]
 800139a:	005b      	lsls	r3, r3, #1
 800139c:	fa02 f303 	lsl.w	r3, r2, r3
 80013a0:	693a      	ldr	r2, [r7, #16]
 80013a2:	4313      	orrs	r3, r2
 80013a4:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	693a      	ldr	r2, [r7, #16]
 80013aa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80013ac:	683b      	ldr	r3, [r7, #0]
 80013ae:	685b      	ldr	r3, [r3, #4]
 80013b0:	f003 0303 	and.w	r3, r3, #3
 80013b4:	2b02      	cmp	r3, #2
 80013b6:	d123      	bne.n	8001400 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80013b8:	697b      	ldr	r3, [r7, #20]
 80013ba:	08da      	lsrs	r2, r3, #3
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	3208      	adds	r2, #8
 80013c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80013c4:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80013c6:	697b      	ldr	r3, [r7, #20]
 80013c8:	f003 0307 	and.w	r3, r3, #7
 80013cc:	009b      	lsls	r3, r3, #2
 80013ce:	220f      	movs	r2, #15
 80013d0:	fa02 f303 	lsl.w	r3, r2, r3
 80013d4:	43db      	mvns	r3, r3
 80013d6:	693a      	ldr	r2, [r7, #16]
 80013d8:	4013      	ands	r3, r2
 80013da:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80013dc:	683b      	ldr	r3, [r7, #0]
 80013de:	691a      	ldr	r2, [r3, #16]
 80013e0:	697b      	ldr	r3, [r7, #20]
 80013e2:	f003 0307 	and.w	r3, r3, #7
 80013e6:	009b      	lsls	r3, r3, #2
 80013e8:	fa02 f303 	lsl.w	r3, r2, r3
 80013ec:	693a      	ldr	r2, [r7, #16]
 80013ee:	4313      	orrs	r3, r2
 80013f0:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80013f2:	697b      	ldr	r3, [r7, #20]
 80013f4:	08da      	lsrs	r2, r3, #3
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	3208      	adds	r2, #8
 80013fa:	6939      	ldr	r1, [r7, #16]
 80013fc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001406:	697b      	ldr	r3, [r7, #20]
 8001408:	005b      	lsls	r3, r3, #1
 800140a:	2203      	movs	r2, #3
 800140c:	fa02 f303 	lsl.w	r3, r2, r3
 8001410:	43db      	mvns	r3, r3
 8001412:	693a      	ldr	r2, [r7, #16]
 8001414:	4013      	ands	r3, r2
 8001416:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001418:	683b      	ldr	r3, [r7, #0]
 800141a:	685b      	ldr	r3, [r3, #4]
 800141c:	f003 0203 	and.w	r2, r3, #3
 8001420:	697b      	ldr	r3, [r7, #20]
 8001422:	005b      	lsls	r3, r3, #1
 8001424:	fa02 f303 	lsl.w	r3, r2, r3
 8001428:	693a      	ldr	r2, [r7, #16]
 800142a:	4313      	orrs	r3, r2
 800142c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	693a      	ldr	r2, [r7, #16]
 8001432:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001434:	683b      	ldr	r3, [r7, #0]
 8001436:	685b      	ldr	r3, [r3, #4]
 8001438:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800143c:	2b00      	cmp	r3, #0
 800143e:	f000 80ac 	beq.w	800159a <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001442:	4b5f      	ldr	r3, [pc, #380]	@ (80015c0 <HAL_GPIO_Init+0x330>)
 8001444:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001446:	4a5e      	ldr	r2, [pc, #376]	@ (80015c0 <HAL_GPIO_Init+0x330>)
 8001448:	f043 0301 	orr.w	r3, r3, #1
 800144c:	6613      	str	r3, [r2, #96]	@ 0x60
 800144e:	4b5c      	ldr	r3, [pc, #368]	@ (80015c0 <HAL_GPIO_Init+0x330>)
 8001450:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001452:	f003 0301 	and.w	r3, r3, #1
 8001456:	60bb      	str	r3, [r7, #8]
 8001458:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800145a:	4a5a      	ldr	r2, [pc, #360]	@ (80015c4 <HAL_GPIO_Init+0x334>)
 800145c:	697b      	ldr	r3, [r7, #20]
 800145e:	089b      	lsrs	r3, r3, #2
 8001460:	3302      	adds	r3, #2
 8001462:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001466:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001468:	697b      	ldr	r3, [r7, #20]
 800146a:	f003 0303 	and.w	r3, r3, #3
 800146e:	009b      	lsls	r3, r3, #2
 8001470:	220f      	movs	r2, #15
 8001472:	fa02 f303 	lsl.w	r3, r2, r3
 8001476:	43db      	mvns	r3, r3
 8001478:	693a      	ldr	r2, [r7, #16]
 800147a:	4013      	ands	r3, r2
 800147c:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001484:	d025      	beq.n	80014d2 <HAL_GPIO_Init+0x242>
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	4a4f      	ldr	r2, [pc, #316]	@ (80015c8 <HAL_GPIO_Init+0x338>)
 800148a:	4293      	cmp	r3, r2
 800148c:	d01f      	beq.n	80014ce <HAL_GPIO_Init+0x23e>
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	4a4e      	ldr	r2, [pc, #312]	@ (80015cc <HAL_GPIO_Init+0x33c>)
 8001492:	4293      	cmp	r3, r2
 8001494:	d019      	beq.n	80014ca <HAL_GPIO_Init+0x23a>
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	4a4d      	ldr	r2, [pc, #308]	@ (80015d0 <HAL_GPIO_Init+0x340>)
 800149a:	4293      	cmp	r3, r2
 800149c:	d013      	beq.n	80014c6 <HAL_GPIO_Init+0x236>
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	4a4c      	ldr	r2, [pc, #304]	@ (80015d4 <HAL_GPIO_Init+0x344>)
 80014a2:	4293      	cmp	r3, r2
 80014a4:	d00d      	beq.n	80014c2 <HAL_GPIO_Init+0x232>
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	4a4b      	ldr	r2, [pc, #300]	@ (80015d8 <HAL_GPIO_Init+0x348>)
 80014aa:	4293      	cmp	r3, r2
 80014ac:	d007      	beq.n	80014be <HAL_GPIO_Init+0x22e>
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	4a4a      	ldr	r2, [pc, #296]	@ (80015dc <HAL_GPIO_Init+0x34c>)
 80014b2:	4293      	cmp	r3, r2
 80014b4:	d101      	bne.n	80014ba <HAL_GPIO_Init+0x22a>
 80014b6:	2306      	movs	r3, #6
 80014b8:	e00c      	b.n	80014d4 <HAL_GPIO_Init+0x244>
 80014ba:	2307      	movs	r3, #7
 80014bc:	e00a      	b.n	80014d4 <HAL_GPIO_Init+0x244>
 80014be:	2305      	movs	r3, #5
 80014c0:	e008      	b.n	80014d4 <HAL_GPIO_Init+0x244>
 80014c2:	2304      	movs	r3, #4
 80014c4:	e006      	b.n	80014d4 <HAL_GPIO_Init+0x244>
 80014c6:	2303      	movs	r3, #3
 80014c8:	e004      	b.n	80014d4 <HAL_GPIO_Init+0x244>
 80014ca:	2302      	movs	r3, #2
 80014cc:	e002      	b.n	80014d4 <HAL_GPIO_Init+0x244>
 80014ce:	2301      	movs	r3, #1
 80014d0:	e000      	b.n	80014d4 <HAL_GPIO_Init+0x244>
 80014d2:	2300      	movs	r3, #0
 80014d4:	697a      	ldr	r2, [r7, #20]
 80014d6:	f002 0203 	and.w	r2, r2, #3
 80014da:	0092      	lsls	r2, r2, #2
 80014dc:	4093      	lsls	r3, r2
 80014de:	693a      	ldr	r2, [r7, #16]
 80014e0:	4313      	orrs	r3, r2
 80014e2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80014e4:	4937      	ldr	r1, [pc, #220]	@ (80015c4 <HAL_GPIO_Init+0x334>)
 80014e6:	697b      	ldr	r3, [r7, #20]
 80014e8:	089b      	lsrs	r3, r3, #2
 80014ea:	3302      	adds	r3, #2
 80014ec:	693a      	ldr	r2, [r7, #16]
 80014ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80014f2:	4b3b      	ldr	r3, [pc, #236]	@ (80015e0 <HAL_GPIO_Init+0x350>)
 80014f4:	689b      	ldr	r3, [r3, #8]
 80014f6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	43db      	mvns	r3, r3
 80014fc:	693a      	ldr	r2, [r7, #16]
 80014fe:	4013      	ands	r3, r2
 8001500:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001502:	683b      	ldr	r3, [r7, #0]
 8001504:	685b      	ldr	r3, [r3, #4]
 8001506:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800150a:	2b00      	cmp	r3, #0
 800150c:	d003      	beq.n	8001516 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800150e:	693a      	ldr	r2, [r7, #16]
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	4313      	orrs	r3, r2
 8001514:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001516:	4a32      	ldr	r2, [pc, #200]	@ (80015e0 <HAL_GPIO_Init+0x350>)
 8001518:	693b      	ldr	r3, [r7, #16]
 800151a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800151c:	4b30      	ldr	r3, [pc, #192]	@ (80015e0 <HAL_GPIO_Init+0x350>)
 800151e:	68db      	ldr	r3, [r3, #12]
 8001520:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	43db      	mvns	r3, r3
 8001526:	693a      	ldr	r2, [r7, #16]
 8001528:	4013      	ands	r3, r2
 800152a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800152c:	683b      	ldr	r3, [r7, #0]
 800152e:	685b      	ldr	r3, [r3, #4]
 8001530:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001534:	2b00      	cmp	r3, #0
 8001536:	d003      	beq.n	8001540 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001538:	693a      	ldr	r2, [r7, #16]
 800153a:	68fb      	ldr	r3, [r7, #12]
 800153c:	4313      	orrs	r3, r2
 800153e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001540:	4a27      	ldr	r2, [pc, #156]	@ (80015e0 <HAL_GPIO_Init+0x350>)
 8001542:	693b      	ldr	r3, [r7, #16]
 8001544:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001546:	4b26      	ldr	r3, [pc, #152]	@ (80015e0 <HAL_GPIO_Init+0x350>)
 8001548:	685b      	ldr	r3, [r3, #4]
 800154a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	43db      	mvns	r3, r3
 8001550:	693a      	ldr	r2, [r7, #16]
 8001552:	4013      	ands	r3, r2
 8001554:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001556:	683b      	ldr	r3, [r7, #0]
 8001558:	685b      	ldr	r3, [r3, #4]
 800155a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800155e:	2b00      	cmp	r3, #0
 8001560:	d003      	beq.n	800156a <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001562:	693a      	ldr	r2, [r7, #16]
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	4313      	orrs	r3, r2
 8001568:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800156a:	4a1d      	ldr	r2, [pc, #116]	@ (80015e0 <HAL_GPIO_Init+0x350>)
 800156c:	693b      	ldr	r3, [r7, #16]
 800156e:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001570:	4b1b      	ldr	r3, [pc, #108]	@ (80015e0 <HAL_GPIO_Init+0x350>)
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001576:	68fb      	ldr	r3, [r7, #12]
 8001578:	43db      	mvns	r3, r3
 800157a:	693a      	ldr	r2, [r7, #16]
 800157c:	4013      	ands	r3, r2
 800157e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001580:	683b      	ldr	r3, [r7, #0]
 8001582:	685b      	ldr	r3, [r3, #4]
 8001584:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001588:	2b00      	cmp	r3, #0
 800158a:	d003      	beq.n	8001594 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 800158c:	693a      	ldr	r2, [r7, #16]
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	4313      	orrs	r3, r2
 8001592:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001594:	4a12      	ldr	r2, [pc, #72]	@ (80015e0 <HAL_GPIO_Init+0x350>)
 8001596:	693b      	ldr	r3, [r7, #16]
 8001598:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800159a:	697b      	ldr	r3, [r7, #20]
 800159c:	3301      	adds	r3, #1
 800159e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80015a0:	683b      	ldr	r3, [r7, #0]
 80015a2:	681a      	ldr	r2, [r3, #0]
 80015a4:	697b      	ldr	r3, [r7, #20]
 80015a6:	fa22 f303 	lsr.w	r3, r2, r3
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	f47f ae78 	bne.w	80012a0 <HAL_GPIO_Init+0x10>
  }
}
 80015b0:	bf00      	nop
 80015b2:	bf00      	nop
 80015b4:	371c      	adds	r7, #28
 80015b6:	46bd      	mov	sp, r7
 80015b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015bc:	4770      	bx	lr
 80015be:	bf00      	nop
 80015c0:	40021000 	.word	0x40021000
 80015c4:	40010000 	.word	0x40010000
 80015c8:	48000400 	.word	0x48000400
 80015cc:	48000800 	.word	0x48000800
 80015d0:	48000c00 	.word	0x48000c00
 80015d4:	48001000 	.word	0x48001000
 80015d8:	48001400 	.word	0x48001400
 80015dc:	48001800 	.word	0x48001800
 80015e0:	40010400 	.word	0x40010400

080015e4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80015e4:	b480      	push	{r7}
 80015e6:	b085      	sub	sp, #20
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]
 80015ec:	460b      	mov	r3, r1
 80015ee:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	691a      	ldr	r2, [r3, #16]
 80015f4:	887b      	ldrh	r3, [r7, #2]
 80015f6:	4013      	ands	r3, r2
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d002      	beq.n	8001602 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80015fc:	2301      	movs	r3, #1
 80015fe:	73fb      	strb	r3, [r7, #15]
 8001600:	e001      	b.n	8001606 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001602:	2300      	movs	r3, #0
 8001604:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001606:	7bfb      	ldrb	r3, [r7, #15]
}
 8001608:	4618      	mov	r0, r3
 800160a:	3714      	adds	r7, #20
 800160c:	46bd      	mov	sp, r7
 800160e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001612:	4770      	bx	lr

08001614 <_vsniprintf_r>:
 8001614:	b530      	push	{r4, r5, lr}
 8001616:	4614      	mov	r4, r2
 8001618:	2c00      	cmp	r4, #0
 800161a:	b09b      	sub	sp, #108	@ 0x6c
 800161c:	4605      	mov	r5, r0
 800161e:	461a      	mov	r2, r3
 8001620:	da05      	bge.n	800162e <_vsniprintf_r+0x1a>
 8001622:	238b      	movs	r3, #139	@ 0x8b
 8001624:	6003      	str	r3, [r0, #0]
 8001626:	f04f 30ff 	mov.w	r0, #4294967295
 800162a:	b01b      	add	sp, #108	@ 0x6c
 800162c:	bd30      	pop	{r4, r5, pc}
 800162e:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8001632:	f8ad 300c 	strh.w	r3, [sp, #12]
 8001636:	bf14      	ite	ne
 8001638:	f104 33ff 	addne.w	r3, r4, #4294967295
 800163c:	4623      	moveq	r3, r4
 800163e:	9302      	str	r3, [sp, #8]
 8001640:	9305      	str	r3, [sp, #20]
 8001642:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001646:	9100      	str	r1, [sp, #0]
 8001648:	9104      	str	r1, [sp, #16]
 800164a:	f8ad 300e 	strh.w	r3, [sp, #14]
 800164e:	4669      	mov	r1, sp
 8001650:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8001652:	f000 f9a1 	bl	8001998 <_svfiprintf_r>
 8001656:	1c43      	adds	r3, r0, #1
 8001658:	bfbc      	itt	lt
 800165a:	238b      	movlt	r3, #139	@ 0x8b
 800165c:	602b      	strlt	r3, [r5, #0]
 800165e:	2c00      	cmp	r4, #0
 8001660:	d0e3      	beq.n	800162a <_vsniprintf_r+0x16>
 8001662:	9b00      	ldr	r3, [sp, #0]
 8001664:	2200      	movs	r2, #0
 8001666:	701a      	strb	r2, [r3, #0]
 8001668:	e7df      	b.n	800162a <_vsniprintf_r+0x16>
	...

0800166c <vsniprintf>:
 800166c:	b507      	push	{r0, r1, r2, lr}
 800166e:	9300      	str	r3, [sp, #0]
 8001670:	4613      	mov	r3, r2
 8001672:	460a      	mov	r2, r1
 8001674:	4601      	mov	r1, r0
 8001676:	4803      	ldr	r0, [pc, #12]	@ (8001684 <vsniprintf+0x18>)
 8001678:	6800      	ldr	r0, [r0, #0]
 800167a:	f7ff ffcb 	bl	8001614 <_vsniprintf_r>
 800167e:	b003      	add	sp, #12
 8001680:	f85d fb04 	ldr.w	pc, [sp], #4
 8001684:	2000000c 	.word	0x2000000c

08001688 <memset>:
 8001688:	4402      	add	r2, r0
 800168a:	4603      	mov	r3, r0
 800168c:	4293      	cmp	r3, r2
 800168e:	d100      	bne.n	8001692 <memset+0xa>
 8001690:	4770      	bx	lr
 8001692:	f803 1b01 	strb.w	r1, [r3], #1
 8001696:	e7f9      	b.n	800168c <memset+0x4>

08001698 <__errno>:
 8001698:	4b01      	ldr	r3, [pc, #4]	@ (80016a0 <__errno+0x8>)
 800169a:	6818      	ldr	r0, [r3, #0]
 800169c:	4770      	bx	lr
 800169e:	bf00      	nop
 80016a0:	2000000c 	.word	0x2000000c

080016a4 <__libc_init_array>:
 80016a4:	b570      	push	{r4, r5, r6, lr}
 80016a6:	4d0d      	ldr	r5, [pc, #52]	@ (80016dc <__libc_init_array+0x38>)
 80016a8:	4c0d      	ldr	r4, [pc, #52]	@ (80016e0 <__libc_init_array+0x3c>)
 80016aa:	1b64      	subs	r4, r4, r5
 80016ac:	10a4      	asrs	r4, r4, #2
 80016ae:	2600      	movs	r6, #0
 80016b0:	42a6      	cmp	r6, r4
 80016b2:	d109      	bne.n	80016c8 <__libc_init_array+0x24>
 80016b4:	4d0b      	ldr	r5, [pc, #44]	@ (80016e4 <__libc_init_array+0x40>)
 80016b6:	4c0c      	ldr	r4, [pc, #48]	@ (80016e8 <__libc_init_array+0x44>)
 80016b8:	f000 fc66 	bl	8001f88 <_init>
 80016bc:	1b64      	subs	r4, r4, r5
 80016be:	10a4      	asrs	r4, r4, #2
 80016c0:	2600      	movs	r6, #0
 80016c2:	42a6      	cmp	r6, r4
 80016c4:	d105      	bne.n	80016d2 <__libc_init_array+0x2e>
 80016c6:	bd70      	pop	{r4, r5, r6, pc}
 80016c8:	f855 3b04 	ldr.w	r3, [r5], #4
 80016cc:	4798      	blx	r3
 80016ce:	3601      	adds	r6, #1
 80016d0:	e7ee      	b.n	80016b0 <__libc_init_array+0xc>
 80016d2:	f855 3b04 	ldr.w	r3, [r5], #4
 80016d6:	4798      	blx	r3
 80016d8:	3601      	adds	r6, #1
 80016da:	e7f2      	b.n	80016c2 <__libc_init_array+0x1e>
 80016dc:	08002308 	.word	0x08002308
 80016e0:	08002308 	.word	0x08002308
 80016e4:	08002308 	.word	0x08002308
 80016e8:	0800230c 	.word	0x0800230c

080016ec <__retarget_lock_acquire_recursive>:
 80016ec:	4770      	bx	lr

080016ee <__retarget_lock_release_recursive>:
 80016ee:	4770      	bx	lr

080016f0 <_free_r>:
 80016f0:	b538      	push	{r3, r4, r5, lr}
 80016f2:	4605      	mov	r5, r0
 80016f4:	2900      	cmp	r1, #0
 80016f6:	d041      	beq.n	800177c <_free_r+0x8c>
 80016f8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80016fc:	1f0c      	subs	r4, r1, #4
 80016fe:	2b00      	cmp	r3, #0
 8001700:	bfb8      	it	lt
 8001702:	18e4      	addlt	r4, r4, r3
 8001704:	f000 f8e0 	bl	80018c8 <__malloc_lock>
 8001708:	4a1d      	ldr	r2, [pc, #116]	@ (8001780 <_free_r+0x90>)
 800170a:	6813      	ldr	r3, [r2, #0]
 800170c:	b933      	cbnz	r3, 800171c <_free_r+0x2c>
 800170e:	6063      	str	r3, [r4, #4]
 8001710:	6014      	str	r4, [r2, #0]
 8001712:	4628      	mov	r0, r5
 8001714:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001718:	f000 b8dc 	b.w	80018d4 <__malloc_unlock>
 800171c:	42a3      	cmp	r3, r4
 800171e:	d908      	bls.n	8001732 <_free_r+0x42>
 8001720:	6820      	ldr	r0, [r4, #0]
 8001722:	1821      	adds	r1, r4, r0
 8001724:	428b      	cmp	r3, r1
 8001726:	bf01      	itttt	eq
 8001728:	6819      	ldreq	r1, [r3, #0]
 800172a:	685b      	ldreq	r3, [r3, #4]
 800172c:	1809      	addeq	r1, r1, r0
 800172e:	6021      	streq	r1, [r4, #0]
 8001730:	e7ed      	b.n	800170e <_free_r+0x1e>
 8001732:	461a      	mov	r2, r3
 8001734:	685b      	ldr	r3, [r3, #4]
 8001736:	b10b      	cbz	r3, 800173c <_free_r+0x4c>
 8001738:	42a3      	cmp	r3, r4
 800173a:	d9fa      	bls.n	8001732 <_free_r+0x42>
 800173c:	6811      	ldr	r1, [r2, #0]
 800173e:	1850      	adds	r0, r2, r1
 8001740:	42a0      	cmp	r0, r4
 8001742:	d10b      	bne.n	800175c <_free_r+0x6c>
 8001744:	6820      	ldr	r0, [r4, #0]
 8001746:	4401      	add	r1, r0
 8001748:	1850      	adds	r0, r2, r1
 800174a:	4283      	cmp	r3, r0
 800174c:	6011      	str	r1, [r2, #0]
 800174e:	d1e0      	bne.n	8001712 <_free_r+0x22>
 8001750:	6818      	ldr	r0, [r3, #0]
 8001752:	685b      	ldr	r3, [r3, #4]
 8001754:	6053      	str	r3, [r2, #4]
 8001756:	4408      	add	r0, r1
 8001758:	6010      	str	r0, [r2, #0]
 800175a:	e7da      	b.n	8001712 <_free_r+0x22>
 800175c:	d902      	bls.n	8001764 <_free_r+0x74>
 800175e:	230c      	movs	r3, #12
 8001760:	602b      	str	r3, [r5, #0]
 8001762:	e7d6      	b.n	8001712 <_free_r+0x22>
 8001764:	6820      	ldr	r0, [r4, #0]
 8001766:	1821      	adds	r1, r4, r0
 8001768:	428b      	cmp	r3, r1
 800176a:	bf04      	itt	eq
 800176c:	6819      	ldreq	r1, [r3, #0]
 800176e:	685b      	ldreq	r3, [r3, #4]
 8001770:	6063      	str	r3, [r4, #4]
 8001772:	bf04      	itt	eq
 8001774:	1809      	addeq	r1, r1, r0
 8001776:	6021      	streq	r1, [r4, #0]
 8001778:	6054      	str	r4, [r2, #4]
 800177a:	e7ca      	b.n	8001712 <_free_r+0x22>
 800177c:	bd38      	pop	{r3, r4, r5, pc}
 800177e:	bf00      	nop
 8001780:	200003e4 	.word	0x200003e4

08001784 <sbrk_aligned>:
 8001784:	b570      	push	{r4, r5, r6, lr}
 8001786:	4e0f      	ldr	r6, [pc, #60]	@ (80017c4 <sbrk_aligned+0x40>)
 8001788:	460c      	mov	r4, r1
 800178a:	6831      	ldr	r1, [r6, #0]
 800178c:	4605      	mov	r5, r0
 800178e:	b911      	cbnz	r1, 8001796 <sbrk_aligned+0x12>
 8001790:	f000 fba6 	bl	8001ee0 <_sbrk_r>
 8001794:	6030      	str	r0, [r6, #0]
 8001796:	4621      	mov	r1, r4
 8001798:	4628      	mov	r0, r5
 800179a:	f000 fba1 	bl	8001ee0 <_sbrk_r>
 800179e:	1c43      	adds	r3, r0, #1
 80017a0:	d103      	bne.n	80017aa <sbrk_aligned+0x26>
 80017a2:	f04f 34ff 	mov.w	r4, #4294967295
 80017a6:	4620      	mov	r0, r4
 80017a8:	bd70      	pop	{r4, r5, r6, pc}
 80017aa:	1cc4      	adds	r4, r0, #3
 80017ac:	f024 0403 	bic.w	r4, r4, #3
 80017b0:	42a0      	cmp	r0, r4
 80017b2:	d0f8      	beq.n	80017a6 <sbrk_aligned+0x22>
 80017b4:	1a21      	subs	r1, r4, r0
 80017b6:	4628      	mov	r0, r5
 80017b8:	f000 fb92 	bl	8001ee0 <_sbrk_r>
 80017bc:	3001      	adds	r0, #1
 80017be:	d1f2      	bne.n	80017a6 <sbrk_aligned+0x22>
 80017c0:	e7ef      	b.n	80017a2 <sbrk_aligned+0x1e>
 80017c2:	bf00      	nop
 80017c4:	200003e0 	.word	0x200003e0

080017c8 <_malloc_r>:
 80017c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80017cc:	1ccd      	adds	r5, r1, #3
 80017ce:	f025 0503 	bic.w	r5, r5, #3
 80017d2:	3508      	adds	r5, #8
 80017d4:	2d0c      	cmp	r5, #12
 80017d6:	bf38      	it	cc
 80017d8:	250c      	movcc	r5, #12
 80017da:	2d00      	cmp	r5, #0
 80017dc:	4606      	mov	r6, r0
 80017de:	db01      	blt.n	80017e4 <_malloc_r+0x1c>
 80017e0:	42a9      	cmp	r1, r5
 80017e2:	d904      	bls.n	80017ee <_malloc_r+0x26>
 80017e4:	230c      	movs	r3, #12
 80017e6:	6033      	str	r3, [r6, #0]
 80017e8:	2000      	movs	r0, #0
 80017ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80017ee:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80018c4 <_malloc_r+0xfc>
 80017f2:	f000 f869 	bl	80018c8 <__malloc_lock>
 80017f6:	f8d8 3000 	ldr.w	r3, [r8]
 80017fa:	461c      	mov	r4, r3
 80017fc:	bb44      	cbnz	r4, 8001850 <_malloc_r+0x88>
 80017fe:	4629      	mov	r1, r5
 8001800:	4630      	mov	r0, r6
 8001802:	f7ff ffbf 	bl	8001784 <sbrk_aligned>
 8001806:	1c43      	adds	r3, r0, #1
 8001808:	4604      	mov	r4, r0
 800180a:	d158      	bne.n	80018be <_malloc_r+0xf6>
 800180c:	f8d8 4000 	ldr.w	r4, [r8]
 8001810:	4627      	mov	r7, r4
 8001812:	2f00      	cmp	r7, #0
 8001814:	d143      	bne.n	800189e <_malloc_r+0xd6>
 8001816:	2c00      	cmp	r4, #0
 8001818:	d04b      	beq.n	80018b2 <_malloc_r+0xea>
 800181a:	6823      	ldr	r3, [r4, #0]
 800181c:	4639      	mov	r1, r7
 800181e:	4630      	mov	r0, r6
 8001820:	eb04 0903 	add.w	r9, r4, r3
 8001824:	f000 fb5c 	bl	8001ee0 <_sbrk_r>
 8001828:	4581      	cmp	r9, r0
 800182a:	d142      	bne.n	80018b2 <_malloc_r+0xea>
 800182c:	6821      	ldr	r1, [r4, #0]
 800182e:	1a6d      	subs	r5, r5, r1
 8001830:	4629      	mov	r1, r5
 8001832:	4630      	mov	r0, r6
 8001834:	f7ff ffa6 	bl	8001784 <sbrk_aligned>
 8001838:	3001      	adds	r0, #1
 800183a:	d03a      	beq.n	80018b2 <_malloc_r+0xea>
 800183c:	6823      	ldr	r3, [r4, #0]
 800183e:	442b      	add	r3, r5
 8001840:	6023      	str	r3, [r4, #0]
 8001842:	f8d8 3000 	ldr.w	r3, [r8]
 8001846:	685a      	ldr	r2, [r3, #4]
 8001848:	bb62      	cbnz	r2, 80018a4 <_malloc_r+0xdc>
 800184a:	f8c8 7000 	str.w	r7, [r8]
 800184e:	e00f      	b.n	8001870 <_malloc_r+0xa8>
 8001850:	6822      	ldr	r2, [r4, #0]
 8001852:	1b52      	subs	r2, r2, r5
 8001854:	d420      	bmi.n	8001898 <_malloc_r+0xd0>
 8001856:	2a0b      	cmp	r2, #11
 8001858:	d917      	bls.n	800188a <_malloc_r+0xc2>
 800185a:	1961      	adds	r1, r4, r5
 800185c:	42a3      	cmp	r3, r4
 800185e:	6025      	str	r5, [r4, #0]
 8001860:	bf18      	it	ne
 8001862:	6059      	strne	r1, [r3, #4]
 8001864:	6863      	ldr	r3, [r4, #4]
 8001866:	bf08      	it	eq
 8001868:	f8c8 1000 	streq.w	r1, [r8]
 800186c:	5162      	str	r2, [r4, r5]
 800186e:	604b      	str	r3, [r1, #4]
 8001870:	4630      	mov	r0, r6
 8001872:	f000 f82f 	bl	80018d4 <__malloc_unlock>
 8001876:	f104 000b 	add.w	r0, r4, #11
 800187a:	1d23      	adds	r3, r4, #4
 800187c:	f020 0007 	bic.w	r0, r0, #7
 8001880:	1ac2      	subs	r2, r0, r3
 8001882:	bf1c      	itt	ne
 8001884:	1a1b      	subne	r3, r3, r0
 8001886:	50a3      	strne	r3, [r4, r2]
 8001888:	e7af      	b.n	80017ea <_malloc_r+0x22>
 800188a:	6862      	ldr	r2, [r4, #4]
 800188c:	42a3      	cmp	r3, r4
 800188e:	bf0c      	ite	eq
 8001890:	f8c8 2000 	streq.w	r2, [r8]
 8001894:	605a      	strne	r2, [r3, #4]
 8001896:	e7eb      	b.n	8001870 <_malloc_r+0xa8>
 8001898:	4623      	mov	r3, r4
 800189a:	6864      	ldr	r4, [r4, #4]
 800189c:	e7ae      	b.n	80017fc <_malloc_r+0x34>
 800189e:	463c      	mov	r4, r7
 80018a0:	687f      	ldr	r7, [r7, #4]
 80018a2:	e7b6      	b.n	8001812 <_malloc_r+0x4a>
 80018a4:	461a      	mov	r2, r3
 80018a6:	685b      	ldr	r3, [r3, #4]
 80018a8:	42a3      	cmp	r3, r4
 80018aa:	d1fb      	bne.n	80018a4 <_malloc_r+0xdc>
 80018ac:	2300      	movs	r3, #0
 80018ae:	6053      	str	r3, [r2, #4]
 80018b0:	e7de      	b.n	8001870 <_malloc_r+0xa8>
 80018b2:	230c      	movs	r3, #12
 80018b4:	6033      	str	r3, [r6, #0]
 80018b6:	4630      	mov	r0, r6
 80018b8:	f000 f80c 	bl	80018d4 <__malloc_unlock>
 80018bc:	e794      	b.n	80017e8 <_malloc_r+0x20>
 80018be:	6005      	str	r5, [r0, #0]
 80018c0:	e7d6      	b.n	8001870 <_malloc_r+0xa8>
 80018c2:	bf00      	nop
 80018c4:	200003e4 	.word	0x200003e4

080018c8 <__malloc_lock>:
 80018c8:	4801      	ldr	r0, [pc, #4]	@ (80018d0 <__malloc_lock+0x8>)
 80018ca:	f7ff bf0f 	b.w	80016ec <__retarget_lock_acquire_recursive>
 80018ce:	bf00      	nop
 80018d0:	200003dc 	.word	0x200003dc

080018d4 <__malloc_unlock>:
 80018d4:	4801      	ldr	r0, [pc, #4]	@ (80018dc <__malloc_unlock+0x8>)
 80018d6:	f7ff bf0a 	b.w	80016ee <__retarget_lock_release_recursive>
 80018da:	bf00      	nop
 80018dc:	200003dc 	.word	0x200003dc

080018e0 <__ssputs_r>:
 80018e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80018e4:	688e      	ldr	r6, [r1, #8]
 80018e6:	461f      	mov	r7, r3
 80018e8:	42be      	cmp	r6, r7
 80018ea:	680b      	ldr	r3, [r1, #0]
 80018ec:	4682      	mov	sl, r0
 80018ee:	460c      	mov	r4, r1
 80018f0:	4690      	mov	r8, r2
 80018f2:	d82d      	bhi.n	8001950 <__ssputs_r+0x70>
 80018f4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80018f8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80018fc:	d026      	beq.n	800194c <__ssputs_r+0x6c>
 80018fe:	6965      	ldr	r5, [r4, #20]
 8001900:	6909      	ldr	r1, [r1, #16]
 8001902:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8001906:	eba3 0901 	sub.w	r9, r3, r1
 800190a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800190e:	1c7b      	adds	r3, r7, #1
 8001910:	444b      	add	r3, r9
 8001912:	106d      	asrs	r5, r5, #1
 8001914:	429d      	cmp	r5, r3
 8001916:	bf38      	it	cc
 8001918:	461d      	movcc	r5, r3
 800191a:	0553      	lsls	r3, r2, #21
 800191c:	d527      	bpl.n	800196e <__ssputs_r+0x8e>
 800191e:	4629      	mov	r1, r5
 8001920:	f7ff ff52 	bl	80017c8 <_malloc_r>
 8001924:	4606      	mov	r6, r0
 8001926:	b360      	cbz	r0, 8001982 <__ssputs_r+0xa2>
 8001928:	6921      	ldr	r1, [r4, #16]
 800192a:	464a      	mov	r2, r9
 800192c:	f000 fae8 	bl	8001f00 <memcpy>
 8001930:	89a3      	ldrh	r3, [r4, #12]
 8001932:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8001936:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800193a:	81a3      	strh	r3, [r4, #12]
 800193c:	6126      	str	r6, [r4, #16]
 800193e:	6165      	str	r5, [r4, #20]
 8001940:	444e      	add	r6, r9
 8001942:	eba5 0509 	sub.w	r5, r5, r9
 8001946:	6026      	str	r6, [r4, #0]
 8001948:	60a5      	str	r5, [r4, #8]
 800194a:	463e      	mov	r6, r7
 800194c:	42be      	cmp	r6, r7
 800194e:	d900      	bls.n	8001952 <__ssputs_r+0x72>
 8001950:	463e      	mov	r6, r7
 8001952:	6820      	ldr	r0, [r4, #0]
 8001954:	4632      	mov	r2, r6
 8001956:	4641      	mov	r1, r8
 8001958:	f000 faa8 	bl	8001eac <memmove>
 800195c:	68a3      	ldr	r3, [r4, #8]
 800195e:	1b9b      	subs	r3, r3, r6
 8001960:	60a3      	str	r3, [r4, #8]
 8001962:	6823      	ldr	r3, [r4, #0]
 8001964:	4433      	add	r3, r6
 8001966:	6023      	str	r3, [r4, #0]
 8001968:	2000      	movs	r0, #0
 800196a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800196e:	462a      	mov	r2, r5
 8001970:	f000 fad4 	bl	8001f1c <_realloc_r>
 8001974:	4606      	mov	r6, r0
 8001976:	2800      	cmp	r0, #0
 8001978:	d1e0      	bne.n	800193c <__ssputs_r+0x5c>
 800197a:	6921      	ldr	r1, [r4, #16]
 800197c:	4650      	mov	r0, sl
 800197e:	f7ff feb7 	bl	80016f0 <_free_r>
 8001982:	230c      	movs	r3, #12
 8001984:	f8ca 3000 	str.w	r3, [sl]
 8001988:	89a3      	ldrh	r3, [r4, #12]
 800198a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800198e:	81a3      	strh	r3, [r4, #12]
 8001990:	f04f 30ff 	mov.w	r0, #4294967295
 8001994:	e7e9      	b.n	800196a <__ssputs_r+0x8a>
	...

08001998 <_svfiprintf_r>:
 8001998:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800199c:	4698      	mov	r8, r3
 800199e:	898b      	ldrh	r3, [r1, #12]
 80019a0:	061b      	lsls	r3, r3, #24
 80019a2:	b09d      	sub	sp, #116	@ 0x74
 80019a4:	4607      	mov	r7, r0
 80019a6:	460d      	mov	r5, r1
 80019a8:	4614      	mov	r4, r2
 80019aa:	d510      	bpl.n	80019ce <_svfiprintf_r+0x36>
 80019ac:	690b      	ldr	r3, [r1, #16]
 80019ae:	b973      	cbnz	r3, 80019ce <_svfiprintf_r+0x36>
 80019b0:	2140      	movs	r1, #64	@ 0x40
 80019b2:	f7ff ff09 	bl	80017c8 <_malloc_r>
 80019b6:	6028      	str	r0, [r5, #0]
 80019b8:	6128      	str	r0, [r5, #16]
 80019ba:	b930      	cbnz	r0, 80019ca <_svfiprintf_r+0x32>
 80019bc:	230c      	movs	r3, #12
 80019be:	603b      	str	r3, [r7, #0]
 80019c0:	f04f 30ff 	mov.w	r0, #4294967295
 80019c4:	b01d      	add	sp, #116	@ 0x74
 80019c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80019ca:	2340      	movs	r3, #64	@ 0x40
 80019cc:	616b      	str	r3, [r5, #20]
 80019ce:	2300      	movs	r3, #0
 80019d0:	9309      	str	r3, [sp, #36]	@ 0x24
 80019d2:	2320      	movs	r3, #32
 80019d4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80019d8:	f8cd 800c 	str.w	r8, [sp, #12]
 80019dc:	2330      	movs	r3, #48	@ 0x30
 80019de:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8001b7c <_svfiprintf_r+0x1e4>
 80019e2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80019e6:	f04f 0901 	mov.w	r9, #1
 80019ea:	4623      	mov	r3, r4
 80019ec:	469a      	mov	sl, r3
 80019ee:	f813 2b01 	ldrb.w	r2, [r3], #1
 80019f2:	b10a      	cbz	r2, 80019f8 <_svfiprintf_r+0x60>
 80019f4:	2a25      	cmp	r2, #37	@ 0x25
 80019f6:	d1f9      	bne.n	80019ec <_svfiprintf_r+0x54>
 80019f8:	ebba 0b04 	subs.w	fp, sl, r4
 80019fc:	d00b      	beq.n	8001a16 <_svfiprintf_r+0x7e>
 80019fe:	465b      	mov	r3, fp
 8001a00:	4622      	mov	r2, r4
 8001a02:	4629      	mov	r1, r5
 8001a04:	4638      	mov	r0, r7
 8001a06:	f7ff ff6b 	bl	80018e0 <__ssputs_r>
 8001a0a:	3001      	adds	r0, #1
 8001a0c:	f000 80a7 	beq.w	8001b5e <_svfiprintf_r+0x1c6>
 8001a10:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8001a12:	445a      	add	r2, fp
 8001a14:	9209      	str	r2, [sp, #36]	@ 0x24
 8001a16:	f89a 3000 	ldrb.w	r3, [sl]
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	f000 809f 	beq.w	8001b5e <_svfiprintf_r+0x1c6>
 8001a20:	2300      	movs	r3, #0
 8001a22:	f04f 32ff 	mov.w	r2, #4294967295
 8001a26:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8001a2a:	f10a 0a01 	add.w	sl, sl, #1
 8001a2e:	9304      	str	r3, [sp, #16]
 8001a30:	9307      	str	r3, [sp, #28]
 8001a32:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8001a36:	931a      	str	r3, [sp, #104]	@ 0x68
 8001a38:	4654      	mov	r4, sl
 8001a3a:	2205      	movs	r2, #5
 8001a3c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001a40:	484e      	ldr	r0, [pc, #312]	@ (8001b7c <_svfiprintf_r+0x1e4>)
 8001a42:	f7fe fbdd 	bl	8000200 <memchr>
 8001a46:	9a04      	ldr	r2, [sp, #16]
 8001a48:	b9d8      	cbnz	r0, 8001a82 <_svfiprintf_r+0xea>
 8001a4a:	06d0      	lsls	r0, r2, #27
 8001a4c:	bf44      	itt	mi
 8001a4e:	2320      	movmi	r3, #32
 8001a50:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8001a54:	0711      	lsls	r1, r2, #28
 8001a56:	bf44      	itt	mi
 8001a58:	232b      	movmi	r3, #43	@ 0x2b
 8001a5a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8001a5e:	f89a 3000 	ldrb.w	r3, [sl]
 8001a62:	2b2a      	cmp	r3, #42	@ 0x2a
 8001a64:	d015      	beq.n	8001a92 <_svfiprintf_r+0xfa>
 8001a66:	9a07      	ldr	r2, [sp, #28]
 8001a68:	4654      	mov	r4, sl
 8001a6a:	2000      	movs	r0, #0
 8001a6c:	f04f 0c0a 	mov.w	ip, #10
 8001a70:	4621      	mov	r1, r4
 8001a72:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001a76:	3b30      	subs	r3, #48	@ 0x30
 8001a78:	2b09      	cmp	r3, #9
 8001a7a:	d94b      	bls.n	8001b14 <_svfiprintf_r+0x17c>
 8001a7c:	b1b0      	cbz	r0, 8001aac <_svfiprintf_r+0x114>
 8001a7e:	9207      	str	r2, [sp, #28]
 8001a80:	e014      	b.n	8001aac <_svfiprintf_r+0x114>
 8001a82:	eba0 0308 	sub.w	r3, r0, r8
 8001a86:	fa09 f303 	lsl.w	r3, r9, r3
 8001a8a:	4313      	orrs	r3, r2
 8001a8c:	9304      	str	r3, [sp, #16]
 8001a8e:	46a2      	mov	sl, r4
 8001a90:	e7d2      	b.n	8001a38 <_svfiprintf_r+0xa0>
 8001a92:	9b03      	ldr	r3, [sp, #12]
 8001a94:	1d19      	adds	r1, r3, #4
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	9103      	str	r1, [sp, #12]
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	bfbb      	ittet	lt
 8001a9e:	425b      	neglt	r3, r3
 8001aa0:	f042 0202 	orrlt.w	r2, r2, #2
 8001aa4:	9307      	strge	r3, [sp, #28]
 8001aa6:	9307      	strlt	r3, [sp, #28]
 8001aa8:	bfb8      	it	lt
 8001aaa:	9204      	strlt	r2, [sp, #16]
 8001aac:	7823      	ldrb	r3, [r4, #0]
 8001aae:	2b2e      	cmp	r3, #46	@ 0x2e
 8001ab0:	d10a      	bne.n	8001ac8 <_svfiprintf_r+0x130>
 8001ab2:	7863      	ldrb	r3, [r4, #1]
 8001ab4:	2b2a      	cmp	r3, #42	@ 0x2a
 8001ab6:	d132      	bne.n	8001b1e <_svfiprintf_r+0x186>
 8001ab8:	9b03      	ldr	r3, [sp, #12]
 8001aba:	1d1a      	adds	r2, r3, #4
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	9203      	str	r2, [sp, #12]
 8001ac0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8001ac4:	3402      	adds	r4, #2
 8001ac6:	9305      	str	r3, [sp, #20]
 8001ac8:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8001b8c <_svfiprintf_r+0x1f4>
 8001acc:	7821      	ldrb	r1, [r4, #0]
 8001ace:	2203      	movs	r2, #3
 8001ad0:	4650      	mov	r0, sl
 8001ad2:	f7fe fb95 	bl	8000200 <memchr>
 8001ad6:	b138      	cbz	r0, 8001ae8 <_svfiprintf_r+0x150>
 8001ad8:	9b04      	ldr	r3, [sp, #16]
 8001ada:	eba0 000a 	sub.w	r0, r0, sl
 8001ade:	2240      	movs	r2, #64	@ 0x40
 8001ae0:	4082      	lsls	r2, r0
 8001ae2:	4313      	orrs	r3, r2
 8001ae4:	3401      	adds	r4, #1
 8001ae6:	9304      	str	r3, [sp, #16]
 8001ae8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001aec:	4824      	ldr	r0, [pc, #144]	@ (8001b80 <_svfiprintf_r+0x1e8>)
 8001aee:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8001af2:	2206      	movs	r2, #6
 8001af4:	f7fe fb84 	bl	8000200 <memchr>
 8001af8:	2800      	cmp	r0, #0
 8001afa:	d036      	beq.n	8001b6a <_svfiprintf_r+0x1d2>
 8001afc:	4b21      	ldr	r3, [pc, #132]	@ (8001b84 <_svfiprintf_r+0x1ec>)
 8001afe:	bb1b      	cbnz	r3, 8001b48 <_svfiprintf_r+0x1b0>
 8001b00:	9b03      	ldr	r3, [sp, #12]
 8001b02:	3307      	adds	r3, #7
 8001b04:	f023 0307 	bic.w	r3, r3, #7
 8001b08:	3308      	adds	r3, #8
 8001b0a:	9303      	str	r3, [sp, #12]
 8001b0c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8001b0e:	4433      	add	r3, r6
 8001b10:	9309      	str	r3, [sp, #36]	@ 0x24
 8001b12:	e76a      	b.n	80019ea <_svfiprintf_r+0x52>
 8001b14:	fb0c 3202 	mla	r2, ip, r2, r3
 8001b18:	460c      	mov	r4, r1
 8001b1a:	2001      	movs	r0, #1
 8001b1c:	e7a8      	b.n	8001a70 <_svfiprintf_r+0xd8>
 8001b1e:	2300      	movs	r3, #0
 8001b20:	3401      	adds	r4, #1
 8001b22:	9305      	str	r3, [sp, #20]
 8001b24:	4619      	mov	r1, r3
 8001b26:	f04f 0c0a 	mov.w	ip, #10
 8001b2a:	4620      	mov	r0, r4
 8001b2c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8001b30:	3a30      	subs	r2, #48	@ 0x30
 8001b32:	2a09      	cmp	r2, #9
 8001b34:	d903      	bls.n	8001b3e <_svfiprintf_r+0x1a6>
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d0c6      	beq.n	8001ac8 <_svfiprintf_r+0x130>
 8001b3a:	9105      	str	r1, [sp, #20]
 8001b3c:	e7c4      	b.n	8001ac8 <_svfiprintf_r+0x130>
 8001b3e:	fb0c 2101 	mla	r1, ip, r1, r2
 8001b42:	4604      	mov	r4, r0
 8001b44:	2301      	movs	r3, #1
 8001b46:	e7f0      	b.n	8001b2a <_svfiprintf_r+0x192>
 8001b48:	ab03      	add	r3, sp, #12
 8001b4a:	9300      	str	r3, [sp, #0]
 8001b4c:	462a      	mov	r2, r5
 8001b4e:	4b0e      	ldr	r3, [pc, #56]	@ (8001b88 <_svfiprintf_r+0x1f0>)
 8001b50:	a904      	add	r1, sp, #16
 8001b52:	4638      	mov	r0, r7
 8001b54:	f3af 8000 	nop.w
 8001b58:	1c42      	adds	r2, r0, #1
 8001b5a:	4606      	mov	r6, r0
 8001b5c:	d1d6      	bne.n	8001b0c <_svfiprintf_r+0x174>
 8001b5e:	89ab      	ldrh	r3, [r5, #12]
 8001b60:	065b      	lsls	r3, r3, #25
 8001b62:	f53f af2d 	bmi.w	80019c0 <_svfiprintf_r+0x28>
 8001b66:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8001b68:	e72c      	b.n	80019c4 <_svfiprintf_r+0x2c>
 8001b6a:	ab03      	add	r3, sp, #12
 8001b6c:	9300      	str	r3, [sp, #0]
 8001b6e:	462a      	mov	r2, r5
 8001b70:	4b05      	ldr	r3, [pc, #20]	@ (8001b88 <_svfiprintf_r+0x1f0>)
 8001b72:	a904      	add	r1, sp, #16
 8001b74:	4638      	mov	r0, r7
 8001b76:	f000 f879 	bl	8001c6c <_printf_i>
 8001b7a:	e7ed      	b.n	8001b58 <_svfiprintf_r+0x1c0>
 8001b7c:	080022cb 	.word	0x080022cb
 8001b80:	080022d5 	.word	0x080022d5
 8001b84:	00000000 	.word	0x00000000
 8001b88:	080018e1 	.word	0x080018e1
 8001b8c:	080022d1 	.word	0x080022d1

08001b90 <_printf_common>:
 8001b90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001b94:	4616      	mov	r6, r2
 8001b96:	4698      	mov	r8, r3
 8001b98:	688a      	ldr	r2, [r1, #8]
 8001b9a:	690b      	ldr	r3, [r1, #16]
 8001b9c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8001ba0:	4293      	cmp	r3, r2
 8001ba2:	bfb8      	it	lt
 8001ba4:	4613      	movlt	r3, r2
 8001ba6:	6033      	str	r3, [r6, #0]
 8001ba8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8001bac:	4607      	mov	r7, r0
 8001bae:	460c      	mov	r4, r1
 8001bb0:	b10a      	cbz	r2, 8001bb6 <_printf_common+0x26>
 8001bb2:	3301      	adds	r3, #1
 8001bb4:	6033      	str	r3, [r6, #0]
 8001bb6:	6823      	ldr	r3, [r4, #0]
 8001bb8:	0699      	lsls	r1, r3, #26
 8001bba:	bf42      	ittt	mi
 8001bbc:	6833      	ldrmi	r3, [r6, #0]
 8001bbe:	3302      	addmi	r3, #2
 8001bc0:	6033      	strmi	r3, [r6, #0]
 8001bc2:	6825      	ldr	r5, [r4, #0]
 8001bc4:	f015 0506 	ands.w	r5, r5, #6
 8001bc8:	d106      	bne.n	8001bd8 <_printf_common+0x48>
 8001bca:	f104 0a19 	add.w	sl, r4, #25
 8001bce:	68e3      	ldr	r3, [r4, #12]
 8001bd0:	6832      	ldr	r2, [r6, #0]
 8001bd2:	1a9b      	subs	r3, r3, r2
 8001bd4:	42ab      	cmp	r3, r5
 8001bd6:	dc26      	bgt.n	8001c26 <_printf_common+0x96>
 8001bd8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8001bdc:	6822      	ldr	r2, [r4, #0]
 8001bde:	3b00      	subs	r3, #0
 8001be0:	bf18      	it	ne
 8001be2:	2301      	movne	r3, #1
 8001be4:	0692      	lsls	r2, r2, #26
 8001be6:	d42b      	bmi.n	8001c40 <_printf_common+0xb0>
 8001be8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8001bec:	4641      	mov	r1, r8
 8001bee:	4638      	mov	r0, r7
 8001bf0:	47c8      	blx	r9
 8001bf2:	3001      	adds	r0, #1
 8001bf4:	d01e      	beq.n	8001c34 <_printf_common+0xa4>
 8001bf6:	6823      	ldr	r3, [r4, #0]
 8001bf8:	6922      	ldr	r2, [r4, #16]
 8001bfa:	f003 0306 	and.w	r3, r3, #6
 8001bfe:	2b04      	cmp	r3, #4
 8001c00:	bf02      	ittt	eq
 8001c02:	68e5      	ldreq	r5, [r4, #12]
 8001c04:	6833      	ldreq	r3, [r6, #0]
 8001c06:	1aed      	subeq	r5, r5, r3
 8001c08:	68a3      	ldr	r3, [r4, #8]
 8001c0a:	bf0c      	ite	eq
 8001c0c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001c10:	2500      	movne	r5, #0
 8001c12:	4293      	cmp	r3, r2
 8001c14:	bfc4      	itt	gt
 8001c16:	1a9b      	subgt	r3, r3, r2
 8001c18:	18ed      	addgt	r5, r5, r3
 8001c1a:	2600      	movs	r6, #0
 8001c1c:	341a      	adds	r4, #26
 8001c1e:	42b5      	cmp	r5, r6
 8001c20:	d11a      	bne.n	8001c58 <_printf_common+0xc8>
 8001c22:	2000      	movs	r0, #0
 8001c24:	e008      	b.n	8001c38 <_printf_common+0xa8>
 8001c26:	2301      	movs	r3, #1
 8001c28:	4652      	mov	r2, sl
 8001c2a:	4641      	mov	r1, r8
 8001c2c:	4638      	mov	r0, r7
 8001c2e:	47c8      	blx	r9
 8001c30:	3001      	adds	r0, #1
 8001c32:	d103      	bne.n	8001c3c <_printf_common+0xac>
 8001c34:	f04f 30ff 	mov.w	r0, #4294967295
 8001c38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001c3c:	3501      	adds	r5, #1
 8001c3e:	e7c6      	b.n	8001bce <_printf_common+0x3e>
 8001c40:	18e1      	adds	r1, r4, r3
 8001c42:	1c5a      	adds	r2, r3, #1
 8001c44:	2030      	movs	r0, #48	@ 0x30
 8001c46:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8001c4a:	4422      	add	r2, r4
 8001c4c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8001c50:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8001c54:	3302      	adds	r3, #2
 8001c56:	e7c7      	b.n	8001be8 <_printf_common+0x58>
 8001c58:	2301      	movs	r3, #1
 8001c5a:	4622      	mov	r2, r4
 8001c5c:	4641      	mov	r1, r8
 8001c5e:	4638      	mov	r0, r7
 8001c60:	47c8      	blx	r9
 8001c62:	3001      	adds	r0, #1
 8001c64:	d0e6      	beq.n	8001c34 <_printf_common+0xa4>
 8001c66:	3601      	adds	r6, #1
 8001c68:	e7d9      	b.n	8001c1e <_printf_common+0x8e>
	...

08001c6c <_printf_i>:
 8001c6c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001c70:	7e0f      	ldrb	r7, [r1, #24]
 8001c72:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8001c74:	2f78      	cmp	r7, #120	@ 0x78
 8001c76:	4691      	mov	r9, r2
 8001c78:	4680      	mov	r8, r0
 8001c7a:	460c      	mov	r4, r1
 8001c7c:	469a      	mov	sl, r3
 8001c7e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8001c82:	d807      	bhi.n	8001c94 <_printf_i+0x28>
 8001c84:	2f62      	cmp	r7, #98	@ 0x62
 8001c86:	d80a      	bhi.n	8001c9e <_printf_i+0x32>
 8001c88:	2f00      	cmp	r7, #0
 8001c8a:	f000 80d2 	beq.w	8001e32 <_printf_i+0x1c6>
 8001c8e:	2f58      	cmp	r7, #88	@ 0x58
 8001c90:	f000 80b9 	beq.w	8001e06 <_printf_i+0x19a>
 8001c94:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8001c98:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8001c9c:	e03a      	b.n	8001d14 <_printf_i+0xa8>
 8001c9e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8001ca2:	2b15      	cmp	r3, #21
 8001ca4:	d8f6      	bhi.n	8001c94 <_printf_i+0x28>
 8001ca6:	a101      	add	r1, pc, #4	@ (adr r1, 8001cac <_printf_i+0x40>)
 8001ca8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8001cac:	08001d05 	.word	0x08001d05
 8001cb0:	08001d19 	.word	0x08001d19
 8001cb4:	08001c95 	.word	0x08001c95
 8001cb8:	08001c95 	.word	0x08001c95
 8001cbc:	08001c95 	.word	0x08001c95
 8001cc0:	08001c95 	.word	0x08001c95
 8001cc4:	08001d19 	.word	0x08001d19
 8001cc8:	08001c95 	.word	0x08001c95
 8001ccc:	08001c95 	.word	0x08001c95
 8001cd0:	08001c95 	.word	0x08001c95
 8001cd4:	08001c95 	.word	0x08001c95
 8001cd8:	08001e19 	.word	0x08001e19
 8001cdc:	08001d43 	.word	0x08001d43
 8001ce0:	08001dd3 	.word	0x08001dd3
 8001ce4:	08001c95 	.word	0x08001c95
 8001ce8:	08001c95 	.word	0x08001c95
 8001cec:	08001e3b 	.word	0x08001e3b
 8001cf0:	08001c95 	.word	0x08001c95
 8001cf4:	08001d43 	.word	0x08001d43
 8001cf8:	08001c95 	.word	0x08001c95
 8001cfc:	08001c95 	.word	0x08001c95
 8001d00:	08001ddb 	.word	0x08001ddb
 8001d04:	6833      	ldr	r3, [r6, #0]
 8001d06:	1d1a      	adds	r2, r3, #4
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	6032      	str	r2, [r6, #0]
 8001d0c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8001d10:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8001d14:	2301      	movs	r3, #1
 8001d16:	e09d      	b.n	8001e54 <_printf_i+0x1e8>
 8001d18:	6833      	ldr	r3, [r6, #0]
 8001d1a:	6820      	ldr	r0, [r4, #0]
 8001d1c:	1d19      	adds	r1, r3, #4
 8001d1e:	6031      	str	r1, [r6, #0]
 8001d20:	0606      	lsls	r6, r0, #24
 8001d22:	d501      	bpl.n	8001d28 <_printf_i+0xbc>
 8001d24:	681d      	ldr	r5, [r3, #0]
 8001d26:	e003      	b.n	8001d30 <_printf_i+0xc4>
 8001d28:	0645      	lsls	r5, r0, #25
 8001d2a:	d5fb      	bpl.n	8001d24 <_printf_i+0xb8>
 8001d2c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8001d30:	2d00      	cmp	r5, #0
 8001d32:	da03      	bge.n	8001d3c <_printf_i+0xd0>
 8001d34:	232d      	movs	r3, #45	@ 0x2d
 8001d36:	426d      	negs	r5, r5
 8001d38:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8001d3c:	4859      	ldr	r0, [pc, #356]	@ (8001ea4 <_printf_i+0x238>)
 8001d3e:	230a      	movs	r3, #10
 8001d40:	e011      	b.n	8001d66 <_printf_i+0xfa>
 8001d42:	6821      	ldr	r1, [r4, #0]
 8001d44:	6833      	ldr	r3, [r6, #0]
 8001d46:	0608      	lsls	r0, r1, #24
 8001d48:	f853 5b04 	ldr.w	r5, [r3], #4
 8001d4c:	d402      	bmi.n	8001d54 <_printf_i+0xe8>
 8001d4e:	0649      	lsls	r1, r1, #25
 8001d50:	bf48      	it	mi
 8001d52:	b2ad      	uxthmi	r5, r5
 8001d54:	2f6f      	cmp	r7, #111	@ 0x6f
 8001d56:	4853      	ldr	r0, [pc, #332]	@ (8001ea4 <_printf_i+0x238>)
 8001d58:	6033      	str	r3, [r6, #0]
 8001d5a:	bf14      	ite	ne
 8001d5c:	230a      	movne	r3, #10
 8001d5e:	2308      	moveq	r3, #8
 8001d60:	2100      	movs	r1, #0
 8001d62:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8001d66:	6866      	ldr	r6, [r4, #4]
 8001d68:	60a6      	str	r6, [r4, #8]
 8001d6a:	2e00      	cmp	r6, #0
 8001d6c:	bfa2      	ittt	ge
 8001d6e:	6821      	ldrge	r1, [r4, #0]
 8001d70:	f021 0104 	bicge.w	r1, r1, #4
 8001d74:	6021      	strge	r1, [r4, #0]
 8001d76:	b90d      	cbnz	r5, 8001d7c <_printf_i+0x110>
 8001d78:	2e00      	cmp	r6, #0
 8001d7a:	d04b      	beq.n	8001e14 <_printf_i+0x1a8>
 8001d7c:	4616      	mov	r6, r2
 8001d7e:	fbb5 f1f3 	udiv	r1, r5, r3
 8001d82:	fb03 5711 	mls	r7, r3, r1, r5
 8001d86:	5dc7      	ldrb	r7, [r0, r7]
 8001d88:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8001d8c:	462f      	mov	r7, r5
 8001d8e:	42bb      	cmp	r3, r7
 8001d90:	460d      	mov	r5, r1
 8001d92:	d9f4      	bls.n	8001d7e <_printf_i+0x112>
 8001d94:	2b08      	cmp	r3, #8
 8001d96:	d10b      	bne.n	8001db0 <_printf_i+0x144>
 8001d98:	6823      	ldr	r3, [r4, #0]
 8001d9a:	07df      	lsls	r7, r3, #31
 8001d9c:	d508      	bpl.n	8001db0 <_printf_i+0x144>
 8001d9e:	6923      	ldr	r3, [r4, #16]
 8001da0:	6861      	ldr	r1, [r4, #4]
 8001da2:	4299      	cmp	r1, r3
 8001da4:	bfde      	ittt	le
 8001da6:	2330      	movle	r3, #48	@ 0x30
 8001da8:	f806 3c01 	strble.w	r3, [r6, #-1]
 8001dac:	f106 36ff 	addle.w	r6, r6, #4294967295
 8001db0:	1b92      	subs	r2, r2, r6
 8001db2:	6122      	str	r2, [r4, #16]
 8001db4:	f8cd a000 	str.w	sl, [sp]
 8001db8:	464b      	mov	r3, r9
 8001dba:	aa03      	add	r2, sp, #12
 8001dbc:	4621      	mov	r1, r4
 8001dbe:	4640      	mov	r0, r8
 8001dc0:	f7ff fee6 	bl	8001b90 <_printf_common>
 8001dc4:	3001      	adds	r0, #1
 8001dc6:	d14a      	bne.n	8001e5e <_printf_i+0x1f2>
 8001dc8:	f04f 30ff 	mov.w	r0, #4294967295
 8001dcc:	b004      	add	sp, #16
 8001dce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001dd2:	6823      	ldr	r3, [r4, #0]
 8001dd4:	f043 0320 	orr.w	r3, r3, #32
 8001dd8:	6023      	str	r3, [r4, #0]
 8001dda:	4833      	ldr	r0, [pc, #204]	@ (8001ea8 <_printf_i+0x23c>)
 8001ddc:	2778      	movs	r7, #120	@ 0x78
 8001dde:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8001de2:	6823      	ldr	r3, [r4, #0]
 8001de4:	6831      	ldr	r1, [r6, #0]
 8001de6:	061f      	lsls	r7, r3, #24
 8001de8:	f851 5b04 	ldr.w	r5, [r1], #4
 8001dec:	d402      	bmi.n	8001df4 <_printf_i+0x188>
 8001dee:	065f      	lsls	r7, r3, #25
 8001df0:	bf48      	it	mi
 8001df2:	b2ad      	uxthmi	r5, r5
 8001df4:	6031      	str	r1, [r6, #0]
 8001df6:	07d9      	lsls	r1, r3, #31
 8001df8:	bf44      	itt	mi
 8001dfa:	f043 0320 	orrmi.w	r3, r3, #32
 8001dfe:	6023      	strmi	r3, [r4, #0]
 8001e00:	b11d      	cbz	r5, 8001e0a <_printf_i+0x19e>
 8001e02:	2310      	movs	r3, #16
 8001e04:	e7ac      	b.n	8001d60 <_printf_i+0xf4>
 8001e06:	4827      	ldr	r0, [pc, #156]	@ (8001ea4 <_printf_i+0x238>)
 8001e08:	e7e9      	b.n	8001dde <_printf_i+0x172>
 8001e0a:	6823      	ldr	r3, [r4, #0]
 8001e0c:	f023 0320 	bic.w	r3, r3, #32
 8001e10:	6023      	str	r3, [r4, #0]
 8001e12:	e7f6      	b.n	8001e02 <_printf_i+0x196>
 8001e14:	4616      	mov	r6, r2
 8001e16:	e7bd      	b.n	8001d94 <_printf_i+0x128>
 8001e18:	6833      	ldr	r3, [r6, #0]
 8001e1a:	6825      	ldr	r5, [r4, #0]
 8001e1c:	6961      	ldr	r1, [r4, #20]
 8001e1e:	1d18      	adds	r0, r3, #4
 8001e20:	6030      	str	r0, [r6, #0]
 8001e22:	062e      	lsls	r6, r5, #24
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	d501      	bpl.n	8001e2c <_printf_i+0x1c0>
 8001e28:	6019      	str	r1, [r3, #0]
 8001e2a:	e002      	b.n	8001e32 <_printf_i+0x1c6>
 8001e2c:	0668      	lsls	r0, r5, #25
 8001e2e:	d5fb      	bpl.n	8001e28 <_printf_i+0x1bc>
 8001e30:	8019      	strh	r1, [r3, #0]
 8001e32:	2300      	movs	r3, #0
 8001e34:	6123      	str	r3, [r4, #16]
 8001e36:	4616      	mov	r6, r2
 8001e38:	e7bc      	b.n	8001db4 <_printf_i+0x148>
 8001e3a:	6833      	ldr	r3, [r6, #0]
 8001e3c:	1d1a      	adds	r2, r3, #4
 8001e3e:	6032      	str	r2, [r6, #0]
 8001e40:	681e      	ldr	r6, [r3, #0]
 8001e42:	6862      	ldr	r2, [r4, #4]
 8001e44:	2100      	movs	r1, #0
 8001e46:	4630      	mov	r0, r6
 8001e48:	f7fe f9da 	bl	8000200 <memchr>
 8001e4c:	b108      	cbz	r0, 8001e52 <_printf_i+0x1e6>
 8001e4e:	1b80      	subs	r0, r0, r6
 8001e50:	6060      	str	r0, [r4, #4]
 8001e52:	6863      	ldr	r3, [r4, #4]
 8001e54:	6123      	str	r3, [r4, #16]
 8001e56:	2300      	movs	r3, #0
 8001e58:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8001e5c:	e7aa      	b.n	8001db4 <_printf_i+0x148>
 8001e5e:	6923      	ldr	r3, [r4, #16]
 8001e60:	4632      	mov	r2, r6
 8001e62:	4649      	mov	r1, r9
 8001e64:	4640      	mov	r0, r8
 8001e66:	47d0      	blx	sl
 8001e68:	3001      	adds	r0, #1
 8001e6a:	d0ad      	beq.n	8001dc8 <_printf_i+0x15c>
 8001e6c:	6823      	ldr	r3, [r4, #0]
 8001e6e:	079b      	lsls	r3, r3, #30
 8001e70:	d413      	bmi.n	8001e9a <_printf_i+0x22e>
 8001e72:	68e0      	ldr	r0, [r4, #12]
 8001e74:	9b03      	ldr	r3, [sp, #12]
 8001e76:	4298      	cmp	r0, r3
 8001e78:	bfb8      	it	lt
 8001e7a:	4618      	movlt	r0, r3
 8001e7c:	e7a6      	b.n	8001dcc <_printf_i+0x160>
 8001e7e:	2301      	movs	r3, #1
 8001e80:	4632      	mov	r2, r6
 8001e82:	4649      	mov	r1, r9
 8001e84:	4640      	mov	r0, r8
 8001e86:	47d0      	blx	sl
 8001e88:	3001      	adds	r0, #1
 8001e8a:	d09d      	beq.n	8001dc8 <_printf_i+0x15c>
 8001e8c:	3501      	adds	r5, #1
 8001e8e:	68e3      	ldr	r3, [r4, #12]
 8001e90:	9903      	ldr	r1, [sp, #12]
 8001e92:	1a5b      	subs	r3, r3, r1
 8001e94:	42ab      	cmp	r3, r5
 8001e96:	dcf2      	bgt.n	8001e7e <_printf_i+0x212>
 8001e98:	e7eb      	b.n	8001e72 <_printf_i+0x206>
 8001e9a:	2500      	movs	r5, #0
 8001e9c:	f104 0619 	add.w	r6, r4, #25
 8001ea0:	e7f5      	b.n	8001e8e <_printf_i+0x222>
 8001ea2:	bf00      	nop
 8001ea4:	080022dc 	.word	0x080022dc
 8001ea8:	080022ed 	.word	0x080022ed

08001eac <memmove>:
 8001eac:	4288      	cmp	r0, r1
 8001eae:	b510      	push	{r4, lr}
 8001eb0:	eb01 0402 	add.w	r4, r1, r2
 8001eb4:	d902      	bls.n	8001ebc <memmove+0x10>
 8001eb6:	4284      	cmp	r4, r0
 8001eb8:	4623      	mov	r3, r4
 8001eba:	d807      	bhi.n	8001ecc <memmove+0x20>
 8001ebc:	1e43      	subs	r3, r0, #1
 8001ebe:	42a1      	cmp	r1, r4
 8001ec0:	d008      	beq.n	8001ed4 <memmove+0x28>
 8001ec2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8001ec6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8001eca:	e7f8      	b.n	8001ebe <memmove+0x12>
 8001ecc:	4402      	add	r2, r0
 8001ece:	4601      	mov	r1, r0
 8001ed0:	428a      	cmp	r2, r1
 8001ed2:	d100      	bne.n	8001ed6 <memmove+0x2a>
 8001ed4:	bd10      	pop	{r4, pc}
 8001ed6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8001eda:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8001ede:	e7f7      	b.n	8001ed0 <memmove+0x24>

08001ee0 <_sbrk_r>:
 8001ee0:	b538      	push	{r3, r4, r5, lr}
 8001ee2:	4d06      	ldr	r5, [pc, #24]	@ (8001efc <_sbrk_r+0x1c>)
 8001ee4:	2300      	movs	r3, #0
 8001ee6:	4604      	mov	r4, r0
 8001ee8:	4608      	mov	r0, r1
 8001eea:	602b      	str	r3, [r5, #0]
 8001eec:	f7ff f87a 	bl	8000fe4 <_sbrk>
 8001ef0:	1c43      	adds	r3, r0, #1
 8001ef2:	d102      	bne.n	8001efa <_sbrk_r+0x1a>
 8001ef4:	682b      	ldr	r3, [r5, #0]
 8001ef6:	b103      	cbz	r3, 8001efa <_sbrk_r+0x1a>
 8001ef8:	6023      	str	r3, [r4, #0]
 8001efa:	bd38      	pop	{r3, r4, r5, pc}
 8001efc:	200003d8 	.word	0x200003d8

08001f00 <memcpy>:
 8001f00:	440a      	add	r2, r1
 8001f02:	4291      	cmp	r1, r2
 8001f04:	f100 33ff 	add.w	r3, r0, #4294967295
 8001f08:	d100      	bne.n	8001f0c <memcpy+0xc>
 8001f0a:	4770      	bx	lr
 8001f0c:	b510      	push	{r4, lr}
 8001f0e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8001f12:	f803 4f01 	strb.w	r4, [r3, #1]!
 8001f16:	4291      	cmp	r1, r2
 8001f18:	d1f9      	bne.n	8001f0e <memcpy+0xe>
 8001f1a:	bd10      	pop	{r4, pc}

08001f1c <_realloc_r>:
 8001f1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001f20:	4680      	mov	r8, r0
 8001f22:	4615      	mov	r5, r2
 8001f24:	460c      	mov	r4, r1
 8001f26:	b921      	cbnz	r1, 8001f32 <_realloc_r+0x16>
 8001f28:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001f2c:	4611      	mov	r1, r2
 8001f2e:	f7ff bc4b 	b.w	80017c8 <_malloc_r>
 8001f32:	b92a      	cbnz	r2, 8001f40 <_realloc_r+0x24>
 8001f34:	f7ff fbdc 	bl	80016f0 <_free_r>
 8001f38:	2400      	movs	r4, #0
 8001f3a:	4620      	mov	r0, r4
 8001f3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001f40:	f000 f81a 	bl	8001f78 <_malloc_usable_size_r>
 8001f44:	4285      	cmp	r5, r0
 8001f46:	4606      	mov	r6, r0
 8001f48:	d802      	bhi.n	8001f50 <_realloc_r+0x34>
 8001f4a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8001f4e:	d8f4      	bhi.n	8001f3a <_realloc_r+0x1e>
 8001f50:	4629      	mov	r1, r5
 8001f52:	4640      	mov	r0, r8
 8001f54:	f7ff fc38 	bl	80017c8 <_malloc_r>
 8001f58:	4607      	mov	r7, r0
 8001f5a:	2800      	cmp	r0, #0
 8001f5c:	d0ec      	beq.n	8001f38 <_realloc_r+0x1c>
 8001f5e:	42b5      	cmp	r5, r6
 8001f60:	462a      	mov	r2, r5
 8001f62:	4621      	mov	r1, r4
 8001f64:	bf28      	it	cs
 8001f66:	4632      	movcs	r2, r6
 8001f68:	f7ff ffca 	bl	8001f00 <memcpy>
 8001f6c:	4621      	mov	r1, r4
 8001f6e:	4640      	mov	r0, r8
 8001f70:	f7ff fbbe 	bl	80016f0 <_free_r>
 8001f74:	463c      	mov	r4, r7
 8001f76:	e7e0      	b.n	8001f3a <_realloc_r+0x1e>

08001f78 <_malloc_usable_size_r>:
 8001f78:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001f7c:	1f18      	subs	r0, r3, #4
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	bfbc      	itt	lt
 8001f82:	580b      	ldrlt	r3, [r1, r0]
 8001f84:	18c0      	addlt	r0, r0, r3
 8001f86:	4770      	bx	lr

08001f88 <_init>:
 8001f88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001f8a:	bf00      	nop
 8001f8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001f8e:	bc08      	pop	{r3}
 8001f90:	469e      	mov	lr, r3
 8001f92:	4770      	bx	lr

08001f94 <_fini>:
 8001f94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001f96:	bf00      	nop
 8001f98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001f9a:	bc08      	pop	{r3}
 8001f9c:	469e      	mov	lr, r3
 8001f9e:	4770      	bx	lr
